#!/bin/bash
# -----------------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Count steps
echo
CurrentSTEP=0
TotalSTEP=$(grep -c '^((CurrentSTEP++))' "$0")

#### Questions
gfnScriptInvoke 'source' "${MySB_InstallDir}/install/Questions" 'UPGRADE'
echo

#### Vars
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_ReadingDatabaseInfos}${CEND}..."
source "${MySB_InstallDir}"/inc/vars
gfnStatusSTD

#### Bulk changes
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_PreUpgrade}${CEND}..."
gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/upgrade/BulkChanges.bsh" 'BEFORE' 'UPGRADE'
gfnStatusSTD

######################################################################

#### Bind
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Bind}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Bind"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Bind" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### DownloadAll
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_DownloadAll}${CEND}..."
gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/DownloadAll" 'UPGRADE'
gfnStatusSTD

#### SourcesList
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_UpdateDebianSources}${CEND}..."
gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/SourcesList" 'UPGRADE' 'buster'
gfnStatusSTD

#### Getting information about monitoring engines
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_ProviderInfos}${CEND}..."
case "${gsServerProvider}" in
    'OVH' | 'HETZNER')
        gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Monitoring" 'UPGRADE'
        gfnStatusSTD
        ;;
    *) echo -e "${Global_NothingToDo}" ;;
esac

#### Fail2Ban
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Fail2Ban}${CEND}..."
if [ "${gbToInstall_Fail2Ban}" == "YES" ] || [ "${gbIsInstalled_Fail2Ban}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/Fail2Ban"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Fail2Ban';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Fail2Ban" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### PeerGuardian
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_PeerGuardian}${CEND}..."
if [ "${gsMySB_PeerBlock}" == "PeerGuardian" ] || (! gfnMd5Check "${MySB_InstallDir}/install/PeerGuardian"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='PeerGuardian';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/PeerGuardian" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### DNScrypt-proxy 1/2
# ((CurrentSTEP++))
# echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_DNScrypt}${CEND}..."
# if [ "${gbToInstall_DNScrypt}" == "YES" ] || [ "${gbIsInstalled_DNScrypt}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/DNScrypt"); then
#     bPrevious="$(cmdMySQL 'MySB_db' "SELECT dnscrypt FROM system WHERE id_system='1';")"
#     cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='DNScrypt-proxy';"
#     cmdMySQL 'MySB_db' "UPDATE system SET dnscrypt='1' WHERE id_system='1';"
#     gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/DNScrypt" 'UPGRADE'
#     cmdMySQL 'MySB_db' "UPDATE system SET dnscrypt='${bPrevious}' WHERE id_system='1';"
#     gfnStatusSTD
# else
#     echo -e "${Global_NothingToDo}"
# fi

#### MySB_UpgradeSystem
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_UpgradeDebianRelease}${CEND}..."
gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/bin/MySB_UpgradeSystem" 'UPGRADE'
gfnStatusSTD

#### MySQL
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_MySQL}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/MySQL"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/MySQL" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Packages
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_AllNeededPackages}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Packages"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Packages" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### CPAN
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_CPAN}${CEND}..."
gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/CPAN" 'UPGRADE'
gfnStatusSTD

######################################################################

#### Tweaks
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Optimiszation}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Tweaks"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Tweaks" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Tools
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Tools}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Tools"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Tools" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Docker
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Docker}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Docker"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Docker" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### SSH
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_SSH}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/SSH"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/SSH" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Quota
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Quota}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Quota"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Quota" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Certificates
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Certificate}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Certificates"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Certificates" 'CreateCACertificate' 'mysb' 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### PHP
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_PHP}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/PHP"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/PHP" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### NginX
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_NginX}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Nginx"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Nginx" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Let's Encrypt
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_LetsEncrypt}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/LetsEncrypt"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Lets Encrypt';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/LetsEncrypt" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### VSFTP
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_VSFTPd}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/VSFTP"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/VSFTP" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Postfix
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Postfix}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Postfix"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Postfix" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Backup Manager
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_BackupManager}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/BackupManager"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/BackupManager" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

######################################################################

#### Shell In A Box
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_ShellInABox}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/ShellInABox"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/ShellInABox" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### rTorrent
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_rTorrent}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/rTorrent"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/rTorrent" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### ruTorrent
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_ruTorrent}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/ruTorrent"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/ruTorrent" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Seedbox-Manager
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Manager}${CEND}..."
if [ "${gbToInstall_Manager}" == "YES" ] || [ "${gbIsInstalled_Manager}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/SeedboxManager"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Seedbox-Manager';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/SeedboxManager" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Cakebox Light
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Cakebox}${CEND}..."
if [ "${gbToInstall_Cakebox}" == "YES" ] || [ "${gbIsInstalled_Cakebox}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/Cakebox"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='CakeBox-Light';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Cakebox" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### NetData
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_InstallingConfiguring} NetData${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/NetData"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/NetData" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### OpenVPN
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_OpenVPN}${CEND}..."
if [ "${gbToInstall_OpenVPN}" == "YES" ]; then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='OpenVPN';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/OpenVPN" 'server' 'UPGRADE' 'FORCE'
    gfnStatusSTD
elif [ "${gbToInstall_OpenVPN}" == "REFRESH" ] || (! gfnMd5Check "${MySB_InstallDir}/install/OpenVPN"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/OpenVPN" 'refresh' 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Samba
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Samba}${CEND}..."
if [ "${gbToInstall_OpenVPN}" == "YES" ] || [ "${gbToInstall_OpenVPN}" == "REFRESH" ] || [ "${gbToInstall_Samba}" == "YES" ]; then
    if (! gfnMd5Check "${MySB_InstallDir}/install/Samba"); then
        cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Samba';"
        gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Samba" 'UPGRADE'
        gfnStatusSTD
    else
        echo -e "${Global_NothingToDo}"
    fi
else
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '0', is_installed = '1' WHERE serv_name='Samba';"
    echo -e "${Global_NothingToDo}"
fi

#### NFS
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_NFS}${CEND}..."
if [ "${gbToInstall_OpenVPN}" == "YES" ] || [ "${gbToInstall_OpenVPN}" == "REFRESH" ] || [ "${gbToInstall_NFS}" == "YES" ]; then
    if (! gfnMd5Check "${MySB_InstallDir}/install/NFS"); then
        cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='NFS';"
        gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/NFS" 'UPGRADE'
        gfnStatusSTD
    else
        echo -e "${Global_NothingToDo}"
    fi
else
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '0', is_installed = '1' WHERE serv_name='NFS';"
    echo -e "${Global_NothingToDo}"
fi

#### LogWatch
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_LogWatch}${CEND}..."
if [ "${gbToInstall_LogWatch}" == "YES" ] || [ "${gbIsInstalled_LogWatch}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/Logwatch"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='LogWatch';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Logwatch" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

### PlexMedia
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_PlexMedia}${CEND}..."
if [ "${gbToInstall_PlexMedia}" == "YES" ] || [ "${gbIsInstalled_PlexMedia}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/PlexMedia"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Plex Media Server';"
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Tautulli';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/PlexMedia" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

### SickChill
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_SickChill}${CEND}..."
if [ "${gbToInstall_SickChill}" == "YES" ] || [ "${gbIsInstalled_SickChill}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/SickChill"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Sickchill';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/SickChill" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### NextCloud
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_InstallingConfiguring} NextCloud${CEND}..."
if [ "${gbToInstall_NextCloud}" == "YES" ] || [ "${gbIsInstalled_NextCloud}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/NextCloud"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='NextCloud';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/NextCloud" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Webmin
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_InstallingConfiguring} Webmin${CEND}..."
if [ "${gbToInstall_Webmin}" == "YES" ] || [ "${gbIsInstalled_Webmin}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/Webmin"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Webmin';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Webmin" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Minio
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_InstallingConfiguring} Minio${CEND}..."
if [ "${gbToInstall_Minio}" == "YES" ] || [ "${gbIsInstalled_Minio}" == "YES" ] || (! gfnMd5Check "${MySB_InstallDir}/install/Minio"); then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Minio';"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Minio" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### RKHunter
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_InstallingConfiguring} RKHunter${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/RKHunter"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/RKHunter" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### PortSentry
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_InstallingConfiguring} Portsentry${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Portsentry"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Portsentry" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

#### Lynis
# ((CurrentSTEP++))
# echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_InstallingConfiguring} Lynis${CEND}..."
# if (! gfnMd5Check "${MySB_InstallDir}/install/Lynis"); then
#     gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Lynis" 'UPGRADE'
#     gfnStatusSTD
# else
#     echo -e "${Global_NothingToDo}"
# fi

######################################################################

#### Bulk changes
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_PostUpgrade}${CEND}..."
gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/upgrade/BulkChanges.bsh" 'AFTER' 'UPGRADE'
gfnStatusSTD

#### DNScrypt-proxy 2/2
if [ "${gbToInstall_DNScrypt}" == "YES" ] || [ "${gbIsInstalled_DNScrypt}" == "YES" ]; then
    cmdMySQL 'MySB_db' "UPDATE system SET dnscrypt='1' WHERE id_system='1';"
fi

#### Cron
((CurrentSTEP++))
echo -e -n "${CBLUE}${CurrentSTEP}/${TotalSTEP}	- ${Upgrade_Cron}${CEND}..."
if (! gfnMd5Check "${MySB_InstallDir}/install/Cron"); then
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/Cron" 'UPGRADE'
    gfnStatusSTD
else
    echo -e "${Global_NothingToDo}"
fi

clear
echo -e "${Upgrade_UpgradeFinished}"
echo

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
