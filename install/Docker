#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Docker-Compose
fnInstallDockerCompose() {
    gfnGetRepoValues 'Docker-Compose'

    if [ "${gsVersionInstalled}" != "${gsVersionLatest}" ]; then
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && [ "${gsVersionLatest}" != "${gsVersionInstalled}" ]; then
            mv -v "${MySB_Files}/${gsRepoFile}" "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        gfnRepoManageByType
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && [ "${gsVersionLatest}" != "${gsVersionInstalled}" ]; then
            rm -fv "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        chmod -v +x "${gsRepoDir}"
        ${gsRepoDir} --version
    fi
}

#### Dry
fnInstallDry() {
    gfnGetRepoValues 'Dry'

    if [ "${gsVersionInstalled}" != "${gsVersionLatest}" ]; then
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && [ "${gsVersionLatest}" != "${gsVersionInstalled}" ]; then
            mv -v "${MySB_Files}/${gsRepoFile}" "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        gfnRepoManageByType
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && [ "${gsVersionLatest}" != "${gsVersionInstalled}" ]; then
            rm -fv "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        chmod -v +x "${gsRepoDir}"
        ${gsRepoDir} --version
        echo
        echo
    fi
}

#### CTop
fnInstallCtop() {
    gfnGetRepoValues 'CTop'

    if [ "${gsVersionInstalled}" != "${gsVersionLatest}" ]; then
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && [ "${gsVersionLatest}" != "${gsVersionInstalled}" ]; then
            mv -v "${MySB_Files}/${gsRepoFile}" "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        gfnRepoManageByType
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && [ "${gsVersionLatest}" != "${gsVersionInstalled}" ]; then
            rm -fv "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        chmod -v +x "${gsRepoDir}"
        ${gsRepoDir} -v
    fi
}

if [ "${gsSwitch}" == "INSTALL" ] || [ "${gsSwitch}" == "UPGRADE" ]; then
    #### Purge packages
    sPackages=(docker docker-engine docker.io containerd runc)
    gfnPackagesManage purge "${sPackages[@]}"

    #### Install Docker packages
    sPackages=(docker-ce docker-ce-cli containerd.io python-backports.ssl-match-hostname python-cached-property python-docker python-dockerpty python-docopt python-functools32 python-jsonschema python-texttable python-websocket python-yaml supervisor)
    gfnPackageBundleInstall "${sPackages[@]}"

    #### Init script
    systemctl daemon-reload
    systemctl enable docker

    #### Secure
    if (! grep -q 'docker' <<<"$(id "${gsMainUserName}")"); then
        usermod -aG docker "${gsMainUserName}"
    fi
    if (! grep -q 'docker' <<<"$(id root)"); then
        usermod -aG docker root
    fi

    #### Supervisor
    install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/docker/supervisord.conf.tmpl /etc/supervisor/supervisord.conf

    #### Check
    docker info

    #### Network
    docker network prune --force
    docker network create --driver=bridge --internal --subnet=172.29.0.0/24 --gateway=172.29.0.254 -o com.docker.network.bridge.name=br-backend backend
    docker network create --driver=bridge --subnet=172.28.0.0/24 --gateway=172.28.0.254 -o com.docker.network.bridge.name=br-frontend frontend
    docker network ls

    #### Install Docker-gs
    sPackages=(devscripts debhelper build-essential dh-make)
    gfnPackageBundleInstall "${sPackages[@]}"
    git clone https://github.com/spotify/docker-gc.git /tmp/docker-gc
    if cd /tmp/docker-gc; then
        debuild -us -uc -b
        sFile="$(ls -A1 /tmp/docker-gc_*.deb 2>/dev/null)"
        if [ -n "${sFile}" ]; then
            sPackages=("${sFile}")
            gfnPackageBundleInstall "${sPackages[@]}"
            {
                echo "#!/bin/bash"
                echo "/usr/sbin/docker-gc"
            } >/etc/cron.daily/docker-gc
        fi
    fi
    gfnDeleteDirectory 0 /tmp/docker-gc
fi

#### Tools
if gfnCheckCommand 0 docker; then
    fnInstallDockerCompose
    fnInstallDry
    fnInstallCtop
    # echo && echo "########## Composerize"
    # npm update composerize -g
fi

#### Compose files
# docker-compose -f "${MySB_InstallDir}"/docker/global.yml up -d

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
