#!/bin/bash
# v5.5
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_	____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
# https://github.com/mysql/mysql-sys
##################### FIRST LINE #####################################

#### Install packages
aPackages=(mariadb-server mysqltuner sqlite3)
gfnPackageBundleInstall "${aPackages[@]}"

#### MySQL upgrade
mysql_upgrade

#### Wolf database
if gfnCheckCommand 0 sqlite3; then
    if [ -f "${gsWolf_DB}" ] || [ -s "${gsWolf_DB}" ]; then
        sqlite3 -cmd '.timeout 150000' "$gsWolf_DB" "DELETE FROM secure_token WHERE 1"
        sqlite3 -cmd '.timeout 150000' "$gsWolf_DB" "UPDATE user SET name='', email='', username='', password='', salt='', last_login='', last_failure='', last_failure='', created_on='', updated_on='' WHERE id='2';"
    fi
fi

# Restore mysql database
if [ -f /etc/mysql/debian.cnf ] && (grep -q 'debian-sys-maint' /etc/mysql/debian.cnf); then
    source /etc/MySB/config_db
    mysql -u root -p"${MySQL_RootPassword}" --verbose mysql <"${MySB_InstallDir}"/templates/mysql/mysql_default.sql
    rm -fv /etc/MySB/config_db
    unset MySQL_RootPassword
fi

#### STOP services
gfnManageServices 'stop' 'mysql'

#### Logrotate
gfnLogRotate 'mysql-server'

#### Cleaning
rm -vf /var/log/mysql.*
rm -vf /var/log/mysql/error.log
rm -vf /var/log/mysql/mysql.log
rm -vf /var/log/mysql/mysql-slow.log

#### Config files
# Clean
rm -vf /etc/mysql/*.cnf*
rm -vf /etc/mysql/conf.d/*.cnf
rm -vf /etc/mysql/mariadb.conf.d/*.cnf
rm -vf /etc/alternatives/my.cnf

# /etc/mysql/mariadb.cnf
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/mysql/etc.mysql.my.cnf.tmpl /etc/mysql/mariadb.cnf
[ ! -h /etc/alternatives/my.cnf ] && ln -sv /etc/mysql/mariadb.cnf /etc/alternatives/my.cnf
# /etc/mysql/my.cnf
[ ! -h /etc/mysql/my.cnf ] && ln -sv /etc/alternatives/my.cnf /etc/mysql/my.cnf

# /etc/mysql/conf.d
echo "[mysql]" >/etc/mysql/conf.d/mysql.cnf
{
    echo "[mysqldump]"
    echo "quick"
    echo "quote-names"
    echo "max_allowed_packet = 16M"
} >/etc/mysql/conf.d/mysqldump.cnf
# /etc/mysql/mariadb.conf.d
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/mysql/etc.mysql.mariadb.conf.d.50-client.cnf.tmpl /etc/mysql/mariadb.conf.d/50-client.cnf
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/mysql/etc.mysql.mariadb.conf.d.50-mysql-clients.cnf.tmpl /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/mysql/etc.mysql.mariadb.conf.d.50-mysqld_safe.cnf.tmpl /etc/mysql/mariadb.conf.d/50-mysqld_safe.cnf
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/mysql/etc.mysql.mariadb.conf.d.50-server.cnf.tmpl /etc/mysql/mariadb.conf.d/50-server.cnf
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/mysql/etc.mysql.mariadb.conf.d.99-MySB.cnf.tmpl /etc/mysql/mariadb.conf.d/99-MySB.cnf

#### START services
gfnManageServices 'start' 'mysql'

#### Load configs values
# shellcheck source=.etc/MySB/config_db
[ -f /etc/MySB/config_db ] && source /etc/MySB/config_db

#### MySQL Secure
if [ -z "${MySQL_RootPassword}" ]; then
    MySQL_RootPassword="${MySQL_RootPassword:-$(gfnGenPassword 32)}"
    MySQL_MysbPassword="${MySQL_MysbPassword:-$(gfnGenPassword 16)}"
    MySQL_BackupManager="${MySQL_BackupManager:-$(gfnGenPassword 16)}"
    MySQL_TorrentPassword="${MySQL_TorrentPassword:-$(gfnGenPassword 16)}"
    MySQL_Secret="${MySQL_Secret:-$(gfnGenPassword 16)}"

    mysql -u root --verbose <<-EOF
        UPDATE mysql.user SET Password=PASSWORD('${MySQL_RootPassword}') WHERE User='root';
        DELETE FROM mysql.user WHERE User='';
        DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost');
        DELETE FROM mysql.user WHERE User='BM_user' AND Host NOT IN ('localhost');
        DELETE FROM mysql.user WHERE User='MySB_user' AND Host NOT IN ('localhost');
        DELETE FROM mysql.db WHERE User='BM_user' AND Host NOT IN ('localhost');
        DELETE FROM mysql.db WHERE User='MySB_user' AND Host NOT IN ('localhost');
        DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
        CREATE DATABASE IF NOT EXISTS MySB_db;
        CREATE USER IF NOT EXISTS 'MySB_user'@'localhost';
        GRANT ALL ON MySB_db.* to 'MySB_user'@'localhost' IDENTIFIED BY '${MySQL_MysbPassword}';
        CREATE USER IF NOT EXISTS 'BM_user'@'localhost';
        GRANT SHOW DATABASES,SELECT,LOCK TABLES ON *.* TO 'BM_user'@'localhost' IDENTIFIED BY '${MySQL_BackupManager}';
        CREATE USER IF NOT EXISTS 'Torrent_user'@'localhost';
        FLUSH PRIVILEGES;
	EOF

    if [ "${gbToInstall_NextCloud}" == "YES" ] || [ "${gbIsInstalled_NextCloud}" != "INIT" ]; then
        mysql -u root -p"${MySQL_RootPassword}" --verbose <<-EOF
            CREATE DATABASE IF NOT EXISTS NextCloud_db CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
            GRANT ALL ON NextCloud_db.* to 'MySB_user'@'localhost' IDENTIFIED BY '${MySQL_MysbPassword}';
            FLUSH PRIVILEGES;
		EOF
    fi

    #### Add MySQL password into MySB config files
    {
        echo "MySQL_RootPassword=\"${MySQL_RootPassword}\""
        echo "MySQL_MysbPassword=\"${MySQL_MysbPassword}\""
        echo "MySQL_BackupManager=\"${MySQL_BackupManager}\""
        echo "MySQL_TorrentPassword=\"${MySQL_TorrentPassword}\""
        echo "MySQL_Secret=\"${MySQL_Secret}\""
    } >/etc/MySB/config_db

    #### Create debian.cnf
    if [ -f /etc/mysql/debian.cnf ] && [ ! -f /etc/mysql/debian.cnf.back ]; then
        mv -v /etc/mysql/debian.cnf /etc/mysql/debian.cnf.back
    fi
    install -v -o root -g root -m 0400 "${MySB_InstallDir}"/templates/mysql/etc.mysql.debian.cnf.tmpl /etc/mysql/debian.cnf

    #### Create MySQL client config file for MySB_user
    {
        echo "[client]"
        echo "user = MySB_user"
        echo "password = ${MySQL_MysbPassword}"
        echo "socket = /var/run/mysqld/mysqld.sock"
    } >/root/.config.cnf
    chmod -v 0600 /root/.config.cnf

    #### Create MySQL client config file for Torrent_user
    {
        echo "[client]"
        echo "user = Torrent_user"
        echo "password = ${MySQL_TorrentPassword}"
        echo "socket = /var/run/mysqld/mysqld.sock"
    } >/home/.config.cnf
    (grep -q 'mysb_users' /etc/group) || groupadd -f mysb_users
    chown -v root:mysb_users /home/.config.cnf
    chmod -v 0644 /home/.config.cnf

    # MySQL Schema
    mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Schema.sql
    # MySQL Triggers
    mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Triggers.sql

    #### Create MySB database (ONLY during a new install, NOT during an upgrade)
    if [ "${gsSwitch}" == "INSTALL" ]; then
        # MySQL content tables
        mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Table_blocklists.sql
        mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Table_dnscrypt_config.sql
        mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Table_lets_encrypt.sql
        mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Table_providers_monitoring.sql
        mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Table_repositories.sql
        mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Table_services.sql
        mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Table_smtp.sql
        mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"${MySB_InstallDir}"/templates/mysql/Table_system.sql
    fi
fi

#### Create debian.cnf
install -v -o root -g root -m 0400 "${MySB_InstallDir}"/templates/mysql/etc.mysql.debian.cnf.tmpl /etc/mysql/debian.cnf

#### MySQL Grant for users
mysql -u root -p"${MySQL_RootPassword}" --verbose <<-EOF
    GRANT SELECT, INSERT, DELETE ON MySB_db.annoncers TO 'Torrent_user'@'localhost' IDENTIFIED BY '${MySQL_TorrentPassword}';
    GRANT SELECT ON MySB_db.trackers_list TO 'Torrent_user'@'localhost' IDENTIFIED BY '${MySQL_TorrentPassword}';
    GRANT SELECT, INSERT, UPDATE, DELETE ON MySB_db.torrents TO 'Torrent_user'@'localhost' IDENTIFIED BY '${MySQL_TorrentPassword}';
    GRANT SELECT (id_system,public_tracker_allow,files_recycling,annoncers_udp,annoncers_check) ON MySB_db.system TO 'Torrent_user'@'localhost' IDENTIFIED BY '${MySQL_TorrentPassword}';
    FLUSH PRIVILEGES;
EOF

#### NextCloud
if [ "${gbToInstall_NextCloud}" == "YES" ] || [ "${gbIsInstalled_NextCloud}" != "INIT" ]; then
    if [ -f /var/lib/mysql/NextCloud_db/db.opt ]; then
        mysql -u root -p"${MySQL_RootPassword}" --verbose <<-EOF
            ALTER DATABASE NextCloud_db CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
            GRANT ALL ON NextCloud_db.* to 'MySB_user'@'localhost' IDENTIFIED BY '${MySQL_MysbPassword}';
            FLUSH PRIVILEGES;
		EOF
    fi
fi

#### Webmin
if [ "${gbIsInstalled_Webmin}" == "YES" ] && [ -f /etc/webmin/mysql/config ]; then
    sed -i '/login=/d' /etc/webmin/mysql/config
    sed -i '/pass=/d' /etc/webmin/mysql/config
    echo "login=root" >>/etc/webmin/mysql/config
    echo "pass=${MySQL_RootPassword}" >>/etc/webmin/mysql/config
fi

#### /etc/MySB/config.php
if [ -n "${MySQL_MysbPassword}" ]; then
    install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/mysb/etc.mysb.config.php.tmpl /etc/MySB/config.php
    perl -pi -e "s/<MySB_InstallDir>/${gsInstallDirEscaped}/g" /etc/MySB/config.php
    perl -pi -e "s/<MySQL_MysbPassword>/${MySQL_MysbPassword}/g" /etc/MySB/config.php
fi

#### Restart service
gfnManageServices 'restart' 'mysql'

#### MariaDB config
echo
echo "########## MariaDB config"
mysql --print-defaults

#### MySQL Tuner
mysqltuner --skippassword --nocolor >"${MySB_InstallDir}"/temp/mysqltuner.log
cat "${MySB_InstallDir}"/temp/mysqltuner.log
if (grep -q 'Run OPTIMIZE TABLE' "${MySB_InstallDir}"/temp/mysqltuner.log); then
    mysqlcheck -u root -p"${MySQL_RootPassword}" --auto-repair --optimize --all-databases
fi
rm -vf "${MySB_InstallDir}"/temp/mysqltuner.log

#### Remove passwords from log
sed -i \
    -e "s/${MySQL_RootPassword}/********************************/g" \
    -e "s/${MySQL_MysbPassword}/****************/g" \
    -e "s/${MySQL_BackupManager}/****************/g" \
    -e "s/${MySQL_TorrentPassword}/****************/g" \
    -e "s/${MySQL_Secret}/****************/g" \
    "${gsLogFile}"

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
