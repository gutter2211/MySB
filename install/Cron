#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

: >/tmp/crontab.tmp

case "${1}" in
    'STOP') rm -f /etc/cron.d/MySB_jobs_check ;;
    *)
        #### Synchro NTP
        echo "0 0,6,12,18 * * * /usr/sbin/ntpdate -u 0.pool.ntp.org 1.pool.ntp.org >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # Log HTML
        echo "0 */1 * * * /bin/bash ${MySB_InstallDir}/scripts/LogServerAndQuota.bsh CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # Dynamic Address Resolver
        echo "*/5 * * * * /bin/bash ${MySB_InstallDir}/scripts/DynamicAddressResolver.bsh $$ CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # Send Mails
        echo "*/5 * * * * /bin/bash ${MySB_InstallDir}/scripts/SendMails.bsh CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # Update Actual Git Repo of MySB
        echo "0 12 * * * /bin/bash ${MySB_InstallDir}/bin/MySB_GitHubRepoUpdate CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # Sources List
        echo "0 1 * * */7 /bin/bash ${MySB_InstallDir}/install/SourcesList CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # Upgrade system
        echo "0 5 * * */7 /bin/bash ${MySB_InstallDir}/bin/MySB_UpgradeSystem CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # Check update for MySB
        echo "0 4 */3 * * /bin/bash ${MySB_InstallDir}/bin/MySB_UpgradeMe CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # GeoIP
        MAXIMUM=58 # DO NOT REMOVE
        MINIMUM=1  # DO NOT REMOVE
        UPGEOIP=$((MINIMUM + RANDOM * (1 + MAXIMUM - MINIMUM) / 32767))
        echo "${UPGEOIP} 2 9 * * /usr/bin/geoipupdate >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # rTorrent Blocklists
        echo "0 */6 * * * /bin/bash ${MySB_InstallDir}/scripts/BlocklistsRTorrent.bsh CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # PaymentReminder.bsh
        echo "5 0 */1 * * /bin/bash ${MySB_InstallDir}/scripts/PaymentReminder.bsh CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # GetTrackersCert.bsh
        echo "10 0 */1 * * /bin/bash ${MySB_InstallDir}/scripts/GetTrackersCert.bsh CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        # Let's Encrypt
        echo "0 */6 * * */1 /bin/bash ${MySB_InstallDir}/install/LetsEncrypt renew CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        rm -fv /etc/cron.d/certbot
        # CPAN
        if gfnCheckCommand 0 cpan; then
            echo "0 5 * * * /bin/bash ${MySB_InstallDir}/install/CPAN CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        fi
        # DNScrypt-proxy
        if gfnCheckCommand 0 dnscrypt-proxy; then
            echo "*/5 * * * * /bin/bash ${MySB_InstallDir}/scripts/DNScrypt-proxy.bsh check CRON" | tee -a /tmp/crontab.tmp
            echo "* 6 * * * /bin/bash ${MySB_InstallDir}/scripts/DNScrypt-proxy.bsh restart CRON" | tee -a /tmp/crontab.tmp
        fi
        # Plex Media Server
        if gfnCheckCommand 0 plexmediaserver; then
            echo "*/5 * * * * systemctl status plexmediaserver >/dev/null || systemctl restart plexmediaserver" | tee -a /tmp/crontab.tmp
            echo "*/5 * * * * systemctl status tautulli >/dev/null || systemctl restart tautulli" | tee -a /tmp/crontab.tmp
        fi
        # SickChill
        if gfnCheckCommand 0 sickchill; then
            echo "*/5 * * * * systemctl status sickchill >/dev/null || systemctl restart sickchill" | tee -a /tmp/crontab.tmp
        fi
        # NextCloud
        if [ "${gbIsInstalled_NextCloud}" == "YES" ]; then
            echo "*/5 * * * * /bin/bash ${MySB_InstallDir}/scripts/NextCloud.bsh scan CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        fi
        # PeerGuardian
        if [ "${gbIsInstalled_PeerGuardian}" == "YES" ]; then
            echo "0 */6 * * * /bin/bash ${MySB_InstallDir}/scripts/PeerGuardian.bsh update CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
            echo "*/5 * * * * /bin/bash ${MySB_InstallDir}/scripts/PeerGuardian.bsh check CRON >/dev/null 2>&1" | tee -a /tmp/crontab.tmp
        fi
        # rTorrent for all normal users
        gfnListCountUsers 'normal'
        for seedUser in ${gsUsersList}; do
            echo "*/5 * * * * /bin/bash /home/${seedUser}/.rTorrent_tasks.sh status" | tee -a /tmp/crontab.tmp
        done
        ;;
esac

crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp

#### Disable init, cron will be started by MySB_SecurityRules
systemctl daemon-reload
systemctl disable cron

#### Add cron job check
if [ "${gsSwitch}" != "STOP" ]; then
    gfnListCountUsers "normal"
    # Count
    nJobsQty="$(grep -c '| tee -a /tmp/crontab.tmp' "${MySB_InstallDir}"/install/Cron)"
    nJobsQty=$((nJobsQty - 1))
    # Users
    nJobsQty=$((nJobsQty - 1 + gnTotalUsers))
    # CPAN
    (! gfnCheckCommand 0 cpan) && nJobsQty=$((nJobsQty - 1))
    # DNScrypt-proxy
    if (! gfnCheckCommand 0 dnscrypt-proxy) && [[ ${gbDnsCryptSwitch} -eq 1 ]]; then
        nJobsQty=$((nJobsQty - 2))
    fi
    # Plex & Tautulli
    (! gfnCheckCommand 0 plexmediaserver) && nJobsQty=$((nJobsQty - 2))
    # SickChill
    [ "${gbIsInstalled_SickChill}" != "YES" ] && nJobsQty=$((nJobsQty - 1))
    # NextCloud
    [ "${gbIsInstalled_NextCloud}" != "YES" ] && nJobsQty=$((nJobsQty - 1))
    # PeerGuardian
    [ "${gbIsInstalled_PeerGuardian}" != "YES" ] && nJobsQty=$((nJobsQty - 2))

    {
        echo "# MySB - Check scheduled jobs (${gsSystemCron})"
        echo "*/5 * * * * root [ \"\$(crontab -l | wc -l)\" -ne ${nJobsQty} ] && { bash ${MySB_InstallDir}/install/Cron CRON; systemctl restart cron.service; }"
    } >/etc/cron.d/MySB_jobs_check
fi

#### START services
case "${gsSwitch}" in
    CRON | START) gfnManageServices start "cron" ;;
esac

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
