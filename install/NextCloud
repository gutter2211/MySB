#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
# https://docs.nextcloud.com/server/stable/admin_manual/configuration_server/occ_command.html
##################### FIRST LINE #####################################

# SmbClient
if ! gfnCheckCommand 0 smbclient; then
    gfnPackageBundleInstall 'smbclient'
fi

#### VARs
source /etc/MySB/config_db
sDataDir="/home/nextcloud"
gfnListCountUsers 'normal'
gfnGetRepoValues 'NextCloud'
sMailDomain="$(echo "${gsMainUserEmail}" | cut -d "@" -f 2)"
sMailFromAddress="$(echo "${gsMainUserEmail}" | cut -d "@" -f 1)"

#### Functions - BoF
function fnCreateDatabase() {
    mysql -u root -p"${MySQL_RootPassword}" --verbose <<-EOF
        CREATE DATABASE IF NOT EXISTS NextCloud_db CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
        GRANT ALL ON NextCloud_db.* to 'MySB_user'@'localhost' IDENTIFIED BY '${MySQL_MysbPassword}';
        FLUSH PRIVILEGES;
	EOF
}
#### Functions - EoF

#### STOP services
# gfnManageServices stop "${binPhpService} nginx"

#### ${gsPhpDir}/fpm/php.ini
perl -pi -e "s/post_max_size = 10M/post_max_size = 20G/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/upload_max_filesize = 10M/upload_max_filesize = 20G/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/max_file_uploads = 20/max_file_uploads = 20000/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/output_buffering = 4096/output_buffering = Off/g" "${gsPhpDir}"/fpm/php.ini
# OPCache
perl -pi -e "s/;opcache.enable=0/opcache.enable=1/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/;opcache.interned_strings_buffer=4/opcache.interned_strings_buffer=8/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/;opcache.max_accelerated_files=2000/opcache.max_accelerated_files=10000/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/;opcache.memory_consumption=64/opcache.memory_consumption=128/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/;opcache.save_comments=1/opcache.save_comments=1/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" "${gsPhpDir}"/fpm/php.ini
perl -pi -e "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" "${gsPhpDir}"/fpm/php.ini
#### ${gsPhpDir}/fpm/pool.d/www.conf
perl -pi -e "s/^;env\[PATH\]/env\[PATH\]/g" "${gsPhpDir}"/fpm/pool.d/www.conf

#### NginX configuration
install -v -g root -o root -m 0600 "${MySB_InstallDir}"/templates/nginx/etc.nginx.locations.nextcloud.conf.tmpl /etc/nginx/locations/NextCloud.conf
perl -pi -e "s/<MySB_InstallDir>/${gsInstallDirEscaped}/g" /etc/nginx/locations/NextCloud.conf

#### START services
gfnManageServices restart "${binPhpService} nginx"

#### An upgrade ? Doing a backup
# Maybe it's an upgrade ?
if [[ ${gnRepoUpgrade} -eq 1 ]] && (gfnCheckCommand 0 "${gsNextCloudDir}"/occ); then
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mode --off"
fi
# Backup the config file if needed
if [ -f "${gsNextCloudDir}"/config/config.php ]; then
    mv -v "${gsNextCloudDir}"/config/config.php "${MySB_InstallDir}"/temp/nextcloud_config.php
fi
if [ -d "${gsNextCloudDir}"/apps2 ]; then
    mv -v "${gsNextCloudDir}"/apps2 "${MySB_InstallDir}"/temp/nextcloud_apps2
fi
if [ -f "${MySB_Files}/${gsRepoFile}" ]; then
    gfnDeleteDirectory 1 "${gsNextCloudDir}"
fi

#### Extract new files
gfnRepoManageByType

#### Restore the old config file
if [ -f "${MySB_InstallDir}"/temp/nextcloud_config.php ]; then
    mv -v "${MySB_InstallDir}"/temp/nextcloud_config.php "${gsNextCloudDir}"/config/config.php
fi
if [ -d "${MySB_InstallDir}"/temp/nextcloud_apps2 ]; then
    if [ -d "${gsNextCloudDir}"/apps2 ]; then
        gfnDeleteDirectory 1 "${gsNextCloudDir}"/apps2
    fi
    mv -v "${MySB_InstallDir}"/temp/nextcloud_apps2 "${gsNextCloudDir}"/apps2
else
    mkdir -pv "${gsNextCloudDir}"/apps2
fi

#### Create needed directories & files
[ ! -d "${sDataDir}" ] && mkdir -pv "${sDataDir}"
[ ! -f /var/log/nextcloud.log ] && touch /var/log/nextcloud.log
chown -v www-data:www-data /var/log/nextcloud.log
chown -R www-data:www-data "${sDataDir}"

#### Clean some files and directories
gfnDeleteDirectory 1 "${gsNextCloudDir}"/data
gfnDeleteDirectory 1 "${gsNextCloudDir}"/assets
rm -fv "${gsNextCloudDir}"/config/config.sample.php
if [ -f "${sDataDir}"/nextcloud.log ]; then
    cat "${sDataDir}"/nextcloud.log >>/var/log/nextcloud.log
    rm -fv "${sDataDir}"/nextcloud.log*
fi

#### Create directories & change rights
gfnManageDirAndFiles 'global'

#### Database directory does not exist ? So we do the first install !
fnCreateDatabase

if [[ (! -f "${gsNextCloudDir}"/config/config.php) || (! -s "${gsNextCloudDir}"/config/config.php) ]] && [ "$(find /var/lib/mysql/NextCloud_db/ -type f -name "*.*" | wc -l)" -le 1 ]; then
    nLoop=4
    for ((i = 1; i <= nLoop; i++)); do
        echo "# First install ${i}/${nLoop}"

        # Do first install
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:install --database \"mysql\" --database-host \"localhost:/run/mysqld/mysqld.sock\" --database-name \"NextCloud_db\" --database-user \"MySB_user\" --database-pass \"${MySQL_MysbPassword}\" --admin-user \"admin\" --admin-email=\"${gsMainUserEmail}\" --admin-pass \"${MySQL_MysbPassword}\" --database-table-prefix \"nc_\" --data-dir \"${sDataDir}\" --no-interaction"

        # Check config.php
        sVersion="$(grep "'version'" "${gsNextCloudDir}"/config/config.php | tail -n 1 | cut -d "'" -f 4)"
        sSecret="$(grep "'secret'" "${gsNextCloudDir}"/config/config.php | tail -n 1 | cut -d "'" -f 4)"
        sPasswordSalt="$(grep "'passwordsalt'" "${gsNextCloudDir}"/config/config.php | tail -n 1 | cut -d "'" -f 4)"
        echo "sVersion: ${sVersion}"
        echo "sSecret: ${sSecret}"
        echo "sPasswordSalt: ${sPasswordSalt}"
        if [ -z "${sVersion}" ] || [ -z "${sSecret}" ] || [ -z "${sPasswordSalt}" ]; then
            cmdMySQL 'MySB_db' "DROP DATABASE IF EXISTS NextCloud_db;" -v
            gfnDeleteDirectory 1 "${sDataDir}"/admin
            rm -fv "${gsNextCloudDir}"/config/config.php
            if [[ ${i} -le ${nLoop} ]]; then
                fnCreateDatabase
            else
                cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade='0' WHERE name='NextCloud';" -v
                cmdMySQL 'MySB_db' "UPDATE services SET to_install='0', is_installed='0' WHERE serv_name='NextCloud';" -v
                gfnEndingScript 1 "NextCloud install failed, aborting !"
            fi
        else
            break
        fi
    done

    # Generate an instance ID
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ upgrade -v"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:repair"

    #### Get needed values from config files
    sVersion="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get version")"
    echo "sVersion: ${sVersion}"
    sInstanceId="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get instanceid")"
    echo "sInstanceId: $sInstanceId"
    sSecret="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get secret")"
    echo "sSecret: ${sSecret}"
    sPasswordSalt="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get passwordsalt")"
    echo "sPasswordSalt: ${sPasswordSalt}"

    #### Config file
    install -v -g www-data -o www-data -m 0640 "${MySB_InstallDir}"/templates/nextcloud/nextcloud.config.php.tmpl "${gsNextCloudDir}"/config/config.php
    # Set db password
    perl -pi -e "s/<dbpassword>/${MySQL_MysbPassword}/g" "${gsNextCloudDir}"/config/config.php
    # Set version
    perl -pi -e "s/<version>/${sVersion}/g" "${gsNextCloudDir}"/config/config.php
    # Set instance ID
    # perl -pi -e "s/<instanceid>/${sInstanceId}/g" "${gsNextCloudDir}"/config/config.php
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set instanceid --value=${sInstanceId}"
    # Set secret
    # perl -pi -e "s/<secret>/${sSecret}/g" "${gsNextCloudDir}"/config/config.php
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set secret --value=${sSecret}"
    # Set password salt
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set passwordsalt --value=${sPasswordSalt}"

    # config:system:set
    echo && echo "# config:system:set"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set trusted_domains 0 --value=127.0.0.1"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set trusted_domains 1 --value=localhost"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set trusted_domains 2 --value=${gsHostNameFqdn}:${gsPort_MySB_HTTPS}"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set default_language --value=${EnvLang}"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set force_language --type boolean --value=false"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set default_locale --value=${gsLocale}"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set force_locale --type boolean --value=false"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set lost_password_link --value="
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set mail_domain --value=${sMailDomain}"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set mail_from_address --value=${sMailFromAddress}"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set overwritehost --value=${gsHostNameFqdn}:${gsPort_MySB_HTTPS}"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set overwrite.cli.url --value=https://localhost:${gsPort_MySB_HTTPS}/nc"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set logtimezone --value=${gsTimeZone}"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set skeletondirectory --value="
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set mysql.utf8mb4 --type boolean --value=true"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set token_auth_enforced --type boolean --value=false"
fi

# Maybe it's an upgrade ?
# if [[ ${gnRepoUpgrade} -eq 1 ]]; then
echo && echo "# upgrade required"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mode --off"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ upgrade -v"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:repair"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ upgrade -v"
# fi

# maintenance
echo && echo "# maintenance"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mimetype:update-db"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mimetype:update-js"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:theme:update"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:data-fingerprint"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:repair"

# app:enable
echo && echo "# app:enable"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ app:enable files_external"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ app:enable notifications"

# config:app:set
echo && echo "# config:app:set"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:app:set --update-only --value=no password_policy enabled"

# Users group
if (! grep -q 'mysb_users' <<<"$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ group:list")"); then
    echo && echo "# roup:add"
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ group:add mysb_users"
fi

echo && echo "# configure"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ db:add-missing-indices"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ db:convert-filecache-bigint --no-interaction"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ background:cron"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ sharing:cleanup-remote-storages"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files:cleanup"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ upgrade -v"
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:repair"

#### Clean actual external mounts (MySB_Home)
for nId in $(cmdMySQL 'NextCloud_db' "SELECT mount_id FROM nc_external_mounts WHERE mount_point='/MySB_Home';"); do
    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:delete ${nId} --yes"
done

#### Create all existing MySB users AND Scanning users' files
for seedUser in ${gsUsersList}; do
    if (getent passwd "${seedUser}" >/dev/null); then
        FnUserMail="$(cmdMySQL 'MySB_db' "SELECT users_email FROM users WHERE users_ident='${seedUser}';")"

        if [ ! -d "${sDataDir}"/"${seedUser}" ]; then
            mkdir -v "${sDataDir}"/"${seedUser}"
            chown -v www-data:www-data "${sDataDir}"/"${seedUser}"
            chmod -v 0755 "${sDataDir}"/"${seedUser}"
        fi

        if (! su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:info \"${seedUser}\"" >/dev/null); then
            OC_PASS="$(cmdMySQL 'MySB_db' "SELECT users_passwd FROM users WHERE users_ident='${seedUser}';")"
            [ -z "${OC_PASS}" ] && OC_PASS="$(gfnGenPassword 8)"
            export OC_PASS
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:add --password-from-env --display-name=\"${seedUser}\" --group=\"mysb_users\" \"${seedUser}\""
            cmdMySQL 'MySB_db' "UPDATE users SET init_password = '1' WHERE users_ident='${seedUser}';" -v
        fi

        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${seedUser}\" settings email \"${FnUserMail}\""
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${seedUser}\" core lang \"${EnvLang}\""
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${seedUser}\" core timezone ${gsTimeZone}"

        #### Create new external mount (MySB_Home)
        IdStorage=$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:create MySB_Home local null::null" | awk '{ print $5 }')
        if [ -n "${IdStorage}" ]; then
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:applicable --add-user \"${seedUser}\" ${IdStorage}"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:config ${IdStorage} datadir '/home/${seedUser}/'"
            # su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} filesystem_check_changes 'false'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} encrypt 'false'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} previews 'true'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} enable_sharing 'true'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} encoding_compatibility 'false'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:verify ${IdStorage}"
        fi

        #### Force a scan
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files:scan --path=\"/${seedUser}/files/MySB_Home\""
    fi

    unset IdStorage FnUserMail OC_PASS
done

#### Logrotate
gfnLogRotate 'nextcloud'

#### Fail2Ban
if [ "${gbToInstall_Fail2Ban}" == "YES" ] || [ "${gbIsInstalled_Fail2Ban}" == "YES" ] && [ -d /etc/fail2ban/filter.d ]; then
    install -v -g root -o root -m 0700 "${MySB_InstallDir}"/templates/fail2ban/etc.fail2ban.filter.d.nextcloud.tmpl /etc/fail2ban/filter.d/nextcloud.conf
    if (! grep -q '\[nextcloud\]' /etc/fail2ban/jail.local); then
        {
            echo ""
            echo "[nextcloud]"
            echo "enabled  	= true"
            echo "port	 	= ${gsPort_MySB_HTTPS}"
            echo "filter   	= nextcloud"
            echo "logpath  	= /var/log/nextcloud.log"
        } >>/etc/fail2ban/jail.local
    fi
fi

#### Scann all files
screen -dmS NextCloud_ScanAll su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files:scan --all"

su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ integrity:check-core" >/tmp/nextcloud_check_integrity.log
if [ -f /tmp/nextcloud_check_integrity.log ]; then
    cat /tmp/nextcloud_check_integrity.log
    sed -i '/INVALID_HASH/d' /tmp/nextcloud_check_integrity.log
    sed -i '/expected/d' /tmp/nextcloud_check_integrity.log
    sed -i '/current/d' /tmp/nextcloud_check_integrity.log
    while read -r sLine; do
        sFile="${gsNextCloudDir}/$(echo "${sLine}" | awk '{ print $2 }' | sed 's/://g;')"
        if [ -f "${sFile}" ]; then
            # sCharset="$(file -i "${sFile}" | awk '{ print $3 }' | cut -d "=" -f 2 | tr [:lower:] [:upper:])"
            iconv -f us-ascii -t utf-16 "${sFile}" -o "${sFile}.tmp"
            iconv -f utf-16le -t utf-8 "${sFile}" -o "${sFile}.tmp"
            [ -f "${sFile}.tmp" ] && rm -v "${sFile}.tmp"
        fi
    done </tmp/nextcloud_check_integrity.log
fi
su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ integrity:check-core"

#### Display 'config.php' for logs
cat "${gsNextCloudDir}"/config/config.php

#### Backuping config file
if [ -f "${gsNextCloudDir}"/config/config.php ]; then
    cp -v "${gsNextCloudDir}"/config/config.php "${MySB_InstallDir}"/files/nextcloud_config.php
fi

#### Update DB
sVersion="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get version")"
# [ "$(awk -F. '{print NF-1}' <<<${sVersion})" -eq 3 ] && sVersion="${sVersion%.*}"

cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade='0', version='${sVersion}' WHERE name='NextCloud';" -v
cmdMySQL 'MySB_db' "UPDATE services SET to_install='0', is_installed='1' WHERE serv_name='NextCloud';" -v

#### CRON
crontab -u www-data -l >/tmp/crontab.tmp
sed -i '/NextCloud/d' /tmp/crontab.tmp
echo "*/15  *  *  *  * php -f ${gsNextCloudDir}/cron.php >/dev/null 2>&1 # NextCloud" | tee -a /tmp/crontab.tmp
crontab -u www-data /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
su -s /bin/sh www-data -c "/usr/bin/php -f ${gsNextCloudDir}/cron.php >/dev/null 2>&1"

#### CLean passwords from log file
[ -f "${gsLogFile}" ] && sed -i "s/${MySQL_MysbPassword}/****************/g;" "${gsLogFile}"

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
