#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
. "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### VARs
bPlexCheckConfig=0
bRtorrentRestart=0
gfnListCountUsers 'normal'

#### PlexMedia & Tautulli update
if [ "${gbIsInstalled_PlexMedia}" == "YES" ]; then
    log_daemon_msg "${UpdateTools_Plex[*]}"
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/PlexMedia" 'CRON'
    gfnStatusLSB

    sPreferencesRev='/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Preferences.rev'
    if [ -f "${sPreferencesRev}" ]; then
        (! grep -q "${gsPlexPreferencesRev}" "${sPreferencesRev}") && bPlexCheckConfig=1
    else
        bPlexCheckConfig=1
    fi
fi

#### SickChill
if [ "${gbIsInstalled_SickChill}" == "YES" ]; then
    log_daemon_msg "${UpdateTools_SickChill[*]}"
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/SickChill" 'CRON'
    gfnStatusLSB
fi

#### DNScrypt-proxy
if gfnCheckCommand 0 dnscrypt-proxy; then
    log_daemon_msg "${UpdateTools_DNScrypt[*]}"
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/DNScrypt" 'CRON'
    gfnStatusLSB
fi

#### Minio
if gfnCheckCommand 0 minio; then
    log_daemon_msg "${UpdateTools_Minio[*]}"
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/Minio" 'CRON'
    gfnStatusLSB
fi

#### Docker tools
if gfnCheckCommand 0 docker; then
    log_daemon_msg "${UpdateTools_DockerTools[*]}"
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/Docker" 'CRON'
    gfnStatusLSB
fi

#### ruTorrent
sVersionDB="$(cmdMySQL 'MySB_db' "SELECT version FROM repositories WHERE name='ruTorrent';")"
sVersionInstalled="$(cat "${gsRutorrentDir}"/version)"
if [ -n "${sVersionDB}" ] && [ "${sVersionDB}" != "${sVersionInstalled}" ]; then
    cmdMySQL 'MySB_db' "DELETE FROM repositories;" -v
    mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"$MySB_InstallDir/templates/mysql/Table_repositories.sql"
    cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade = '1' WHERE name='ruTorrent';" -v
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/ruTorrent" 'UPGRADE'
fi

#### rTorrent scripts (to leave for next version ;-)
for sUser in ${gsUsersList}; do
    (! grep -q "${gsRtorrentInit}" "/etc/init.d/rtorrent-${sUser}") && bRtorrentRestart=1
    (! grep -q "${gsRtorrentRc}" "/home/${sUser}/.rtorrent.rc") && bRtorrentRestart=1
    (! grep -q "${gsRtorrentScriptErased}" "/home/${sUser}/.rTorrent_erased.sh") && bRtorrentRestart=1
    (! grep -q "${gsRtorrentScriptFinished}" "/home/${sUser}/.rTorrent_finished.sh") && bRtorrentRestart=1
    (! grep -q "${gsRtorrentScriptInotify}" "/home/${sUser}/.rTorrent_inotify.sh") && bRtorrentRestart=1
    (! grep -q "${gsRtorrentScriptInsertedNew}" "/home/${sUser}/.rTorrent_inserted_new.sh") && bRtorrentRestart=1
    (! grep -q "${gsRtorrentScriptTasks}" "/home/${sUser}/.rTorrent_tasks.sh") && bRtorrentRestart=1
    (! grep -q "${gsRtorrentScriptSynchro}" "/home/${sUser}/scripts/synchro.sh") && bRtorrentRestart=1
done

#### rTorrent restart needed
if [[ ${bRtorrentRestart} -eq 1 ]]; then
    for sUser in ${gsUsersList}; do
        gfnManageServices stop "rtorrent-${sUser}"

        # init.d
        install -o root -g root -m 0755 "${MySB_InstallDir}"/templates/rtorrent/etc.init.d.rtorrent.tmpl /etc/init.d/rtorrent-"${sUser}"
        perl -pi -e "s/<username>/${sUser}/g" /etc/init.d/rtorrent-"${sUser}"
        systemctl daemon-reload &>/dev/null
        systemctl disable rtorrent-"${sUser}" &>/dev/null
        rm -f /home/"${sUser}"/.check_annoncers

        gfnManageServices start "rtorrent-${sUser}"

        # Add users allowed commands to sudoers.d (used by rTorrent scripts)
        {
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/cp -av /home/*/rtorrent/* /home/${sUser}/rtorrent/complete/*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/cp -alv /home/*/rtorrent/* /home/${sUser}/rtorrent/complete/*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/chown -Rv ${sUser}\:${sUser} /home/${sUser}/rtorrent/complete/*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/chown -Rv ${sUser}\:mysb_users /home/${sUser}/rtorrent/complete/*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/bash ${MySB_InstallDir}/scripts/GetTrackersCert.bsh USER ${sUser} [A-Z0-9]*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/bash /home/${sUser}/.rTorrent_tasks.sh*"
        } >"/etc/sudoers.d/MySB_${sUser}"
        chmod 0440 "/etc/sudoers.d/MySB_${sUser}"
    done
fi

#### Plex restart needed
if [[ ${bPlexCheckConfig} -eq 1 ]]; then
    . /opt/MySB/install/PlexMedia
    gfnManageServices stop "plexmediaserver"
    fnGeneratePreferencesXml
    gfnManageServices start "plexmediaserver"
fi

#### Cron jobs
if (! grep -q "${gsSystemCron}" /etc/cron.d/MySB_jobs_check); then
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/Cron" 'UPGRADE'
fi

#### OpenVPN CRL fix
if [[ -d /etc/openvpn/easy-rsa ]] && [ "$(grep EASYRSA_CRL_DAYS /etc/openvpn/easy-rsa/vars | awk '{print $3}')" -ne 3650 ]; then
    install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/openvpn/easyrsa_vars.tmpl /etc/openvpn/easy-rsa/vars
    sed -i "s/<servername>/${gsHostNameFqdn}/g;" /etc/openvpn/easy-rsa/vars
    sed -i "s/<email_address>/${gsMainUserEmail}/g;" /etc/openvpn/easy-rsa/vars
    install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/openvpn/openssl-easyrsa.cnf.tmpl /etc/openvpn/easy-rsa/openssl-easyrsa.cnf
    sed -i "s/<servername>/${gsHostNameFqdn}/g;" /etc/openvpn/easy-rsa/openssl-easyrsa.cnf
    sed -i "s/<email_address>/${gsMainUserEmail}/g;" /etc/openvpn/easy-rsa/openssl-easyrsa.cnf
    if cd /etc/openvpn/easy-rsa/; then
        ./easyrsa gen-crl
        gfnManageServices restart "openvpn"
    fi
fi

# -----------------------------------------
# shellcheck source=inc/includes_after
. "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
