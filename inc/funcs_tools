#!/bin/bash
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
{ [ -z "${vars}" ] || [ "${vars}" -ne 1 ]; } && {
    echo "Please load 'vars' file before..."
    exit 0
}
##################### FIRST LINE #####################################

#### Get filename to download from URI
gfnGetUriFilename() {
    local sHeader sFilename
    [[ -z ${1} ]] && return 1

    sHeader="$(curl -sI "${1}" | tr -d '\r')"

    sFilename="$(echo "${sHeader}" | grep -o -i -E 'filename=.*$')"
    if [[ -n ${sFilename} ]]; then
        echo "${sFilename#filename=}"
        return
    fi

    sFilename="$(echo "${sHeader}" | grep -o -i -E 'location:.*$')"
    if [[ -n ${sFilename} ]]; then
        basename "${sFilename#location\:}"
        return
    fi

    return 1
}

#### Quota, space available
gfnQuotaSpaceAvailable() {
    local nFreeSpaceToKeep nFreeSpace

    nFreeSpace="$(df --sync /home/ | awk '{ print $2 }' | tail -n 1)" # (Kb)
    # nFreeSpaceToKeep="$(echo "4" | awk '{ kb = $1 * 1024 * 1024 ; print kb }')" # Keep a minimum of 4Go of free space (Kb)
    nFreeSpaceToKeep="$((nFreeSpace * 10 / 100))"
    nFreeSpace=$((nFreeSpace - nFreeSpaceToKeep)) # (Kb)

    echo $nFreeSpace
}

#### Quota, space used for each users
gfnQuotaSpaceUsed() {
    local sUser
    local nUsersSpaceUsed nHomeSpace nNextCloudSpace nTotalSpaceUsed
    nTotalSpaceUsed=0
    sVerbose=""
    if [ -n "${1}" ] && [ "${1}" == "-v" ]; then
        sVerbose="${1}"
    fi

    gfnListCountUsers 'normal'
    for sUser in ${gsUsersList}; do
        nUsersSpaceUsed=0
        if [ -d /home/"${sUser}"/ ]; then
            nHomeSpace="$(du -s /home/"${sUser}"/ | awk '{ print $1 }')" # (Kb)
            nUsersSpaceUsed=$((nUsersSpaceUsed + nHomeSpace))
        fi
        if [ -d /home/nextcloud/"${sUser}"/ ]; then
            nNextCloudSpace="$(du -s /home/nextcloud/"${sUser}"/ | awk '{ print $1 }')" # (Kb)
            nUsersSpaceUsed=$((nUsersSpaceUsed + nNextCloudSpace))
        fi

        if [[ ${nTotalSpaceUsed} -eq 0 ]]; then
            nTotalSpaceUsed="${nUsersSpaceUsed}"
        else
            nTotalSpaceUsed=$((nTotalSpaceUsed + nUsersSpaceUsed))
        fi
        cmdMySQL 'MySB_db' "UPDATE users SET space_used='${nUsersSpaceUsed}' WHERE users_ident='${sUser}';" "${sVerbose}"
    done
    cmdMySQL 'MySB_db' "UPDATE system SET total_space_used='${nTotalSpaceUsed}' WHERE id_system='1';" "${sVerbose}"
}

#### Statistics
gfnStatistics() {
    # No credentials are retained !
    # The server IP is only used to know the country of the SeedBox.
    # The IP address is not keeped on destination.
    # No log is retained via the 'CustomLog /dev/null Combined' parameter.
    # local sMachineId sStatsAllowed sResult sCountry
    local sMachineId sResult sCountry sMachineIdFile

    if [ -f /etc/machine-id ]; then
        sMachineIdFile="/etc/machine-id"
    elif [ -f /var/lib/dbus/machine-id ]; then
        sMachineIdFile="/var/lib/dbus/machine-id"
    else
        dbus-uuidgen --ensure
        sMachineIdFile="/etc/machine-id"
    fi

    if [ -f "${sMachineIdFile}" ]; then
        if (gfnCheckCommand 0 geoiplookup) && [ -n "${gsSrvIpAddressExt}" ]; then
            sCountry="$(geoiplookup "${gsSrvIpAddressExt}" | awk '{ print $5 }')"
            [ -z "${sCountry}" ] && sCountry="unknown"
        else
            sCountry="unknown"
        fi

        if [ ! -f /.dockerenv ]; then
            sMachineId="$(sha256sum <<<"${sMachineIdFile}" | awk '{ print $1 }')"
        else
            sMachineId="$(sha256sum <<<"tests integ" | awk '{ print $1 }')"
        fi
        [ -f "${MySB_InstallDir}"/statistics ] && sStatsAllowed="$(cat "${MySB_InstallDir}"/statistics)" || sStatsAllowed="no_stats"
        if [ -n "${sMachineId}" ] && [ "${sStatsAllowed}" != "no_stats" ]; then
            [ -z "${sCountry}" ] && sCountry="unknown"
            sResult="$(curl --silent --retry 1 -A 'MySB' --data "version=${gsCurrentVersion}&country=${sCountry}&machine_id=${sMachineId}" https://mysb.ddns.net/statistics/)"
            (grep -q 'Statistics updated at' <<<"${sResult}") && echo "${sResult}" >"${MySB_InstallDir}"/statistics
        fi
    fi
}

#### Count down
gfnCountDown() {
    for ((i = ${1}; i >= 0; i -= 1)); do
        echo -n " $i"
        sleep 1
    done
    echo
}

#### Count & Create user listing
gfnListCountUsers() {
    local sWhere

    case "${1}" in
        'all') sWhere="" ;;
        'normal') sWhere="WHERE account_type='normal'" ;;
        'plex') sWhere="WHERE account_type='plex'" ;;
        'active') sWhere="WHERE is_active='1'" ;;
    esac
    gsUsersList="$(cmdMySQL 'MySB_db' "SELECT users_ident FROM users $sWhere;")"
    gnTotalUsers="$(echo "${gsUsersList}" | wc -w)"

    export gsUsersList gnTotalUsers
}

#### Check if service is started
gfnGetPid() {
    local sPid

    case "${1}" in
        "${binPhpService}") [ -f /run/php/"${binPhpFpm}".pid ] && sPid="$(cat /run/php/"${binPhpFpm}".pid)" ;;
        "fail2ban") [ -f /var/run/fail2ban/fail2ban.pid ] && sPid="$(cat /var/run/fail2ban/fail2ban.pid)" ;;
        "webmin") [ -f /var/webmin/miniserv.pid ] && sPid="$(cat /var/webmin/miniserv.pid)" ;;
        "tautulli") [ -f /var/run/tautulli/tautulli.pid ] && sPid="$(cat /var/run/tautulli/tautulli.pid)" ;;
        "sickchill") [ -f /var/run/sickchill/sickchill.pid ] && sPid="$(cat /var/run/sickchill/sickchill.pid)" ;;
        rtorrent-*) [ -f /var/run/"${1}".pid ] && sPid="$(cat "/var/run/${1}.pid")" ;;
        "ssh") sPid="$(pidof sshd)" ;;
        "pglcmd") sPid="$(pidof pgld)" ;;
        "bind9") sPid="$(pidof named)" ;;
        "mysql") sPid="$(pidof mysqld)" ;;
        "postfix") sPid="$(pidof master)" ;;
        *) sPid="$(pidof "${1}")" ;;
    esac

    if [ -n "${sPid}" ]; then
        return 0
    else
        if (pgrep -f "${1}" >/dev/null); then
            return 0
        else
            return 1
        fi
    fi
}

#### Check status for screen
gfnStatusSTD() {
    local sResult
    sResult="$?"

    if [ "${sResult}" -gt 0 ]; then
        echo -e "${Global_Failed}"
        echo ""
        echo -e "${Global_Error_StatusSTD[@]}"
        gfnEndingScript 1
    else
        [ ! -f /.dockerenv ] && echo -e "${Global_Done}"
    fi
}

#### Check status for LSB
gfnStatusLSB() {
    local sResult
    sResult="$?"

    if [ "${sResult}" -gt 0 ]; then
        if [ -n "${1}" ]; then
            if [ "${1}" -gt 0 ]; then
                log_end_msg 1
            else
                log_end_msg 0
            fi
        else
            log_end_msg 1
        fi
    else
        log_end_msg 0
    fi
}

#### Waiting standard
gfnWaitingSTD() {
    if [ ! -f /.dockerenv ]; then
        while (screen -ls | grep -q "${1}"); do
            sleep 1
        done
    fi
}

#### Password generator
gfnGenPassword() {
    local nLenght
    nLenght=${1}
    if [ -z "${nLenght}" ]; then
        nLenght=16
    fi
    pwgen -cnsB ${nLenght} 1
}

#### Ending script
gfnEndingScript() {
    local bExitCode
    bExitCode="${1}"
    if [ -n "${2}" ]; then
        echo -e "${2}"
    fi

    # shellcheck source=inc/includes_after
    source "$(dirname "${0}")"/../inc/includes_after

    exit "${bExitCode}"
}

#### Check if a command/package exist
gfnCheckCommand() {
    type -P "${2}" >/dev/null
    local nValue="$?"

    if [ "${nValue}" -gt 0 ]; then # Try WHEREIS, some tools does not have command but are present and can be started
        case "${2}" in
            rtorrent-*)
                if [ -f /etc/init.d/"${2}" ]; then
                    case "${1}" in
                        0) return 0 ;;
                        1) echo "YES" ;;
                    esac
                else
                    case "${1}" in
                        0) return 1 ;;
                        1) echo "NO" ;;
                    esac
                fi
                ;;
            'tautulli')
                if [ -f "/lib/systemd/system/${2}.service" ]; then
                    case "${1}" in
                        0) return 0 ;;
                        1) echo "YES" ;;
                    esac
                else
                    case "${1}" in
                        0) return 1 ;;
                        1) echo "NO" ;;
                    esac
                fi
                ;;
            'sickchill')
                if [ -f "/lib/systemd/system/${2}.service" ]; then
                    case "${1}" in
                        0) return 0 ;;
                        1) echo "YES" ;;
                    esac
                else
                    case "${1}" in
                        0) return 1 ;;
                        1) echo "NO" ;;
                    esac
                fi
                ;;
            *)
                # if [ -z "$(whereis "${2}" | awk '{ print $2 }')" ]; then
                # if [ -z "$(whereis "${2}" | grep 'bin\|sbin')" ]; then
                if (! grep -q 'bin\|sbin' <<<"$(whereis "${2}")"); then
                    if dpkg -s "${2}" &>/dev/null; then # Try DPKG
                        case "${1}" in
                            0) return 0 ;;
                            1) echo "YES" ;;
                        esac
                    else
                        case "${1}" in
                            0) return 1 ;;
                            1) echo "NO" ;;
                        esac
                    fi
                else
                    case "${1}" in
                        0) return 0 ;;
                        1) echo "YES" ;;
                    esac
                fi
                ;;
        esac
    else # Command/Package verified
        case "${1}" in
            0) return "${nValue}" ;;
            1)
                case "${nValue}" in
                    0) echo "YES" ;;
                    *) echo "NO" ;;
                esac
                ;;
        esac
    fi
}

#### Switch DNS (standard / DNScrypt-proxy)
gfnSwitchDNS() {
    local sCommand sDNS sValues
    sCommand="${1}"
    sValues=()
    for sDNS in "${gaDnsList[@]}"; do
        sValues+=("${sDNS};")
    done

    case "${sCommand}" in
        'dnscrypt')
            if gfnCheckCommand 0 dnscrypt-proxy && gfnCheckCommand 0 bind9; then
                # resolv.conf
                sed -i \
                    -e '/search/d' \
                    -e '/nameserver/d' \
                    -e '/options edns0/d' \
                    /etc/resolv.conf
                {
                    echo "options edns0"
                    echo "nameserver 127.0.0.1"
                } >>/etc/resolv.conf
                # BIND with DNScrypt-proxy support
                sed -i "s/${sValues[*]}/127.0.0.1 port 52;/g;" /etc/bind/named.conf.options
                /usr/sbin/rndc reload >/dev/null
            fi
            ;;
        'bind')
            # resolv.conf
            sed -i \
                -e '/search/d' \
                -e '/nameserver/d' \
                -e '/options edns0/d' \
                /etc/resolv.conf
            {
                echo "options edns0"
                echo "nameserver 127.0.0.1"
            } >>/etc/resolv.conf
            # BIND delete DNScrypt-proxy support
            if gfnCheckCommand 0 bind9; then
                sed -i "s/127.0.0.1 port 52;/${sValues[*]}/g;" /etc/bind/named.conf.options
                /usr/sbin/rndc reload >/dev/null
            fi
            ;;
    esac
}

#### Delete directory
gfnDeleteDirectory() {
    local nVerbose sDirectory
    if [ -z "${1}" ]; then
        nVerbose=1
    else
        nVerbose="${1}"
    fi
    if [ -z "${2}" ]; then
        echo "gfnDeleteDirectory failed, No directory givened !"
    else
        sDirectory="${2%/}"
    fi

    if [ -d "${sDirectory}" ]; then
        case "${sDirectory}" in
            "${MySB_InstallDir}" | "${MySB_Files}" | "${MySB_InstallDir}/temp" | "${MySB_InstallDir}/files" | "/home" | "/" | "//") echo "gfnDeleteDirectory avoided, directory '${sDirectory}' not permited !" ;;
            *)
                if (rm -rf "${sDirectory}") && [ "$nVerbose" -eq 1 ]; then
                    echo "'${sDirectory}' deleted !"
                fi
                ;;

        esac
    fi
}

#### Cleaning MySB before compress
gfnCleanBeforeUpgrade() {
    local sLfsFilesType

    # Clean 'sources' directory
    clear
    echo -e "${CBLUE}${UpgradeMe_DeleteTempFiles}${CEND}"
    echo -e -n "${CRED}${Global_PleaseWait} ${CEND}"
    gfnCountDown 3
    rm -vrf "${MySB_InstallDir}"/sources/*
    # Clean 'temp' directory
    rm -vrf "${MySB_InstallDir}"/temp/*
    # Clean 'db' directory
    if [ -d "${MySB_InstallDir}"/db ]; then
        rm -vrf "${MySB_InstallDir}"/db/*.old
        rm -vrf "${MySB_InstallDir}"/db/*.dump.sql
    fi

    # Clean '.git' directory
    clear
    echo -e "${CBLUE}${UpgradeMe_CleanGit}${CEND}"
    echo -e -n "${CRED}$Global_PleaseWait ${CEND}"
    gfnCountDown 3
    # /opt/MySB
    cd "${MySB_InstallDir}"/ || exit
    for branch in $(git branch | grep -v "${gsCurrentVersion}\|rev" | sed 's/ //g;s/*//g;'); do
        git branch -D "${branch}"
    done
    for tag in $(git tag | grep -v "${gsCurrentVersion}\|rev" | sed 's/ //g;s/*//g;'); do
        git tag -d "${tag}"
    done
    git gc
    git repack -Ad
    git prune
    # /opt/MySB_files
    cd "${MySB_Files}"/ || exit
    for branch in $(git branch | grep -v "${gsCurrentVersion}\|rev" | sed 's/ //g;s/*//g;'); do
        git branch -D "${branch}"
    done
    for tag in $(git tag | grep -v "${gsCurrentVersion}\|rev" | sed 's/ //g;s/*//g;'); do
        git tag -d "${tag}"
    done
    git gc
    git repack -Ad
    git prune

    # Clean files tracked by LFS
    [ -f "${MySB_InstallDir}"/.gitattributes ] && sLfsFilesType="$(grep 'filter=lfs' .gitattributes | awk '{ print $1 }')"
    for sFileType in ${sLfsFilesType}; do
        rm -fv "${MySB_InstallDir}/$sFileType"
    done
    cd "${MySB_InstallDir}"/ || exit
    git pull origin "${gsCurrentVersion}"
}

#### Get Values Repositories
gfnGetRepoValues() {
    local sValues
    unset gsRepoURL gnRepoActive gnRepoUpgrade gsRepoFile gsRepoVersion gsRepoDir gsFileURL gsVersionLatest gsVersionInstalled gsRepoType gbDownload gbExtract

    if [ -z "${1}" ]; then
        return 1
    else
        gsRepoName="${1}"
    fi

    sValues="$(cmdMySQL 'MySB_db' "SELECT type,dir,version,upgrade,file,url,active FROM repositories WHERE name='${gsRepoName}';" | sed "s/<InstallDir>/${gsInstallDirEscaped}/g;" | sed 's/\t/|/g;')"
    gsRepoType="$(echo "${sValues}" | awk '{split($0,a,"|"); print a[1]}')"
    gsRepoDir="$(echo "${sValues}" | awk '{split($0,a,"|"); print a[2]}')"
    gsRepoVersion="$(echo "${sValues}" | awk '{split($0,a,"|"); print a[3]}')"
    gnRepoUpgrade="$(echo "${sValues}" | awk '{split($0,a,"|"); print a[4]}')"
    gsRepoFile="$(echo "${sValues}" | awk '{split($0,a,"|"); print a[5]}')"
    gsRepoURL="$(echo "${sValues}" | awk '{split($0,a,"|"); print a[6]}')"
    gnRepoActive="$(echo "${sValues}" | awk '{split($0,a,"|"); print a[7]}')"

    case "${gsRepoName}" in
        'Plex Media Server')
            gsRepoFile="$(gfnGetUriFilename "${gsRepoURL}" || echo 'Not installed')"
            gsVersionLatest="$(echo "${gsRepoFile}" | cut -d '_' -f 2)"
            gsVersionInstalled="$(dpkg -l plexmediaserver 2>/dev/null | tail -n 1 | awk '{ print $3 }')"
            ;;
        'Tautulli')
            if [ -f "${gsRepoDir}"/release.lock ]; then
                gsVersionInstalled="$(cat "${gsRepoDir}"/release.lock)"
            elif [ -f "${gsRepoDir}"/plexpy/version.py ]; then
                gsVersionInstalled="$(grep 'PLEXPY_RELEASE_VERSION' "${gsRepoDir}"/plexpy/version.py | cut -d '=' -f 2 | cut -d '"' -f 2)"
            else
                gsVersionInstalled="Not installed"
            fi
            gsVersionLatest="$(${binCURL} "${gsRepoURL}" | jq -r .tag_name)"
            gsFileURL="$(${binCURL} "${gsRepoURL}" | grep 'tarball_url' | awk '{ print $2 }' | cut -d '"' -f 2)"
            ;;
        'SickChill')
            if [ -f "${gsRepoDir}"/release.lock ]; then
                gsVersionInstalled="$(cat "${gsRepoDir}"/release.lock)"
            else
                gsVersionInstalled="Not installed"
            fi
            gsVersionLatest="$(${binCURL} "${gsRepoURL}" | jq -r .tag_name)"
            gsFileURL="$(${binCURL} "${gsRepoURL}" | grep 'tarball_url' | awk '{ print $2 }' | cut -d '"' -f 2)"
            ;;
        'Docker-Compose')
            [ -f /usr/local/bin/docker-compose ] && chmod +x /usr/local/bin/docker-compose
            gsVersionInstalled="$(gfnCheckCommand 0 /usr/local/bin/docker-compose && /usr/local/bin/docker-compose --version | awk '{ print $3 }' | cut -d ',' -f 1 || echo 'Not installed')"
            gsVersionLatest="$(${binCURL} "${gsRepoURL}" | jq -r .tag_name)"
            gsFileURL="$(${binCURL} "${gsRepoURL}" | jq -r '.assets[] | select(.name == "docker-compose-Linux-x86_64").browser_download_url')"
            ;;
        'CTop')
            [ -f /usr/local/bin/ctop ] && chmod +x /usr/local/bin/ctop
            gsVersionInstalled="$(gfnCheckCommand 0 /usr/local/bin/ctop && /usr/local/bin/ctop -v | awk '{ print $3 }' | cut -d ',' -f 1 || echo 'Not installed')"
            # gsVersionLatest="$(${binCURL} "${gsRepoURL}" | jq -r .tag_name)"
            # gsFileURL="$(${binCURL} "${gsRepoURL}" | jq -r '.assets[] | select(.name == "ctop-0.7.2-linux-amd64").browser_download_url')"
            ;;
        'Dry')
            [ -f /usr/local/bin/dry ] && chmod +x /usr/local/bin/dry
            gsVersionInstalled="$(gfnCheckCommand 0 /usr/local/bin/dry && /usr/local/bin/dry --version | awk '{ print $3 }' | cut -d ',' -f 1 || echo 'Not installed')"
            # gsVersionLatest="$(${binCURL} "${gsRepoURL}" | jq -r .tag_name)"
            # gsFileURL="$(${binCURL} "${gsRepoURL}" | jq -r '.assets[] | select(.name == "dry-linux-amd64").browser_download_url')"
            ;;
        'Composer')
            [ -f "${gsRepoDir}" ] && chmod +x "${gsRepoDir}"
            gsVersionInstalled="$(gfnCheckCommand 0 /usr/local/bin/composer && /usr/local/bin/composer --version 2>/dev/null | grep 'Composer version' | awk '{ print $3 }' || echo 'Not installed')"
            # gsVersionLatest="$(${binCURL} "${gsRepoURL}" | grep 'tag_name' | awk '{ print $2 }' | cut -d '"' -f 2)"
            # gsFileURL="$(${binCURL} "${gsRepoURL}" | jq -r '.assets[] | select(.name == "composer.phar").browser_download_url')"
            ;;
        'Minio')
            [ -f "${gsRepoDir}" ] && chmod +x "${gsRepoDir}"
            gsVersionInstalled="$(gfnCheckCommand 0 /usr/local/bin/minio && /usr/local/bin/minio --version 2>/dev/null | awk '{ print $3 }' || echo 'Not installed')"
            gsVersionLatest="$(${binCURL} "${gsRepoURL}" | grep 'tag_name' | awk '{ print $2 }' | cut -d '"' -f 2)"
            gsFileURL="https://dl.minio.io/server/minio/release/linux-amd64/minio"
            ;;
        'Lynis')
            [ -f "${gsRepoDir}" ] && chmod +x "${gsRepoDir}"
            gsVersionInstalled="$(gfnCheckCommand 0 /opt/Lynis/lynis && /opt/Lynis/lynis version 2>/dev/null || echo 'Not installed')"
            # gsVersionLatest="$(${binCURL} "${gsRepoURL}" | grep 'tag_name' | awk '{ print $2 }' | cut -d '"' -f 2)"
            # gsFileURL="https://downloads.cisofy.com/lynis/lynis-${gsVersionLatest}.tar.gz"
            ;;
        'Minio Client')
            [ -f "${gsRepoDir}" ] && chmod +x "${gsRepoDir}"
            gsVersionInstalled="$(gfnCheckCommand 0 /usr/local/bin/mc && /usr/local/bin/mc --version 2>/dev/null | awk '{ print $3 }' || echo 'Not installed')"
            gsVersionLatest="$(${binCURL} "${gsRepoURL}" | grep 'tag_name' | awk '{ print $2 }' | cut -d '"' -f 2)"
            gsFileURL="https://dl.min.io/client/mc/release/linux-amd64/mc"
            ;;
        'Goofys')
            [ -f "${gsRepoDir}" ] && chmod +x "${gsRepoDir}"
            gsVersionInstalled="$(gfnCheckCommand 0 /usr/local/bin/goofys && /usr/local/bin/goofys --version 2>/dev/null | awk '{ print $3 }' | cut -d '-' -f 1 || echo 'Not installed')"
            # gsVersionLatest="$(${binCURL} "${gsRepoURL}" | grep 'tag_name' | awk '{ print $2 }' | cut -d '"' -f 2)"
            # gsFileURL="$(${binCURL} "${gsRepoURL}" | jq -r '.assets[] | select(.name == "goofys").browser_download_url')"
            ;;
        'DNScrypt-proxy')
            [ -f "${gsRepoDir}" ] && chmod +x "${gsRepoDir}"
            gsVersionInstalled="$(gfnCheckCommand 0 /usr/local/bin/dnscrypt-proxy && /usr/local/bin/dnscrypt-proxy --version 2>/dev/null || echo 'Not installed')"
            gsVersionLatest="$(${binCURL} "${gsRepoURL}" | grep 'tag_name' | awk '{ print $2 }' | cut -d '"' -f 2)"
            gsFileURL="$(${binCURL} "${gsRepoURL}" | jq -r '.assets[] | select(.name | contains("dnscrypt-proxy-linux_x86_64")).browser_download_url' | grep -v 'minisig')"
            ;;
        'Shellcheck')
            [ -f "${gsRepoDir}" ] && chmod +x "${gsRepoDir}"
            gsVersionInstalled="$([ -f /usr/bin/shellcheck ] && shellcheck --version | grep 'version' | head -n 1 | awk '{ print $2 }' || echo 'Not installed')"
            # gsVersionLatest="$(${binCURL} 'https://api.github.com/repos/koalaman/shellcheck/tags' | grep 'name' | head -n 1 | awk '{ print $2 }' | cut -d '"' -f 2 | sed 's/v//g;')"
            ;;
        'GeoIPupdate')
            gfnCheckCommand 0 /usr/bin/geoipupdate && /usr/bin/geoipupdate --version &>/tmp/geoip.rev || echo 'Not installed' >/tmp/geoip.rev
            gsVersionInstalled="$(awk '{ print $2 }' <<<"$(cat /tmp/geoip.rev)")"
            # gsVersionLatest="$(${binCURL} "${gsRepoURL}" | jq -r .tag_name | sed 's/v//g;')"
            # gsFileURL="$(${binCURL} "${gsRepoURL}" | jq --arg PLATFORM_ARCH "geoipupdate_${gsVersionLatest}_linux_amd64.deb" -r '.assets[] | select(.name | endswith($PLATFORM_ARCH)).browser_download_url')"
            ;;
        *) gsFileURL="" ;;
    esac

    echo
    echo "########## ${gsRepoName}"
    [ "${gsRepoType}" != "DOCKER" ] && echo "Directory : ${gsRepoDir}"
    [ "${gsRepoType}" != "DOCKER" ] && echo "File : ${MySB_Files}/${gsRepoFile}"
    [ "${gsRepoType}" != "DOCKER" ] && echo "To upgrade : $(echo "${gnRepoUpgrade}" | sed 's/0/NO/g;s/1/YES/g;')"
    echo "Type : ${gsRepoType}"
    echo "Active : $(echo "${gnRepoActive}" | sed 's/0/NO/g;s/1/YES/g;')"
    echo "Repo URL : ${gsRepoURL}"
    echo "Version in DB : ${gsRepoVersion}"
    [ -n "${gsVersionInstalled}" ] && echo "Current version : ${gsVersionInstalled}"
    [ -n "${gsVersionLatest}" ] && echo "Latest version : ${gsVersionLatest}"
    [ -n "${gsFileURL}" ] && echo "File URL : ${gsFileURL}"
    case "${gsScriptName}" in
        'DownloadAll')
            gbDownload=1
            case "${gsRepoName}" in
                'Minio' | 'Minio Client' | 'Goofys' | 'Dry' | 'CTop' | 'Docker-Compose')
                    gbDownload=0
                    ;;
            esac
            gbExtract=0
            ;;
        *)
            gbDownload=1
            gbExtract=1
            ;;
    esac
    echo "To download : $(echo "${gbDownload}" | sed 's/0/NO/g;s/1/YES/g;')"
    [ "${gsRepoType}" != "DOCKER" ] && echo "To extract : $(echo "${gbExtract}" | sed 's/0/NO/g;s/1/YES/g;')"

    [ -z "${gsRepoDir}" ] ||
        [ -z "${gsRepoVersion}" ] ||
        [ -z "${gsRepoFile}" ] ||
        [ -z "${gnRepoUpgrade}" ] ||
        [ -z "${gnRepoActive}" ] ||
        [ -z "${gsRepoURL}" ] && return 1 || return 0
}

#### Repository Manage by type
gfnRepoManageByType() {
    local sSubDir

    if [ -z "${gnRepoActive}" ] || [ "${gnRepoActive}" -eq 0 ]; then
        return 1
    fi

    if [ "${gnRepoActive}" -eq 1 ]; then
        gnError=0

        echo "--> Started at : $(date +"%T")"

        case "${gsRepoType}" in
            'TARXZ')
                [ -n "${gsFileURL}" ] && gsRepoURL="${gsFileURL}"
                if [[ ${gbDownload} -eq 1 ]] || [[ ${gnRepoUpgrade} -eq 1 ]]; then
                    if [ ! -f "${MySB_Files}/${gsRepoFile}" ]; then
                        ${binCURL} -o "${MySB_Files}/${gsRepoFile}" "${gsRepoURL}"
                        gnError=$?
                    fi
                fi
                if [[ ${gbExtract} -eq 1 ]]; then
                    if [ ! -d "${gsRepoDir}" ] && [[ ${gnError} -eq 0 ]]; then
                        sSubDir="$(tar --xz -tf "${MySB_Files}"/"${gsRepoFile}" | cut -d '/' -f 1 | uniq)"
                        if [ ! -d "${MySB_InstallDir}/temp/${sSubDir}" ]; then
                            tar --xz -xf "${MySB_Files}/${gsRepoFile}" -C "${MySB_InstallDir}/temp/"
                            gnError=$?
                        fi
                        if [ -d "${MySB_InstallDir}/temp/${sSubDir}" ] && [ ! -d "${gsRepoDir}" ]; then
                            mv -v "${MySB_InstallDir}/temp/${sSubDir}" "${gsRepoDir}"
                            chown -R root:root "${gsRepoDir}"
                            gnError=$?
                        fi
                    fi
                fi
                ;;
            'TARGZ')
                [ -n "${gsFileURL}" ] && gsRepoURL="${gsFileURL}"
                if [[ ${gbDownload} -eq 1 ]] || [[ ${gnRepoUpgrade} -eq 1 ]]; then
                    if [ ! -f "${MySB_Files}/${gsRepoFile}" ]; then
                        ${binCURL} -o "${MySB_Files}/${gsRepoFile}" "${gsRepoURL}"
                        gnError=$?
                    fi
                fi
                if [[ ${gbExtract} -eq 1 ]]; then
                    if [ ! -d "${gsRepoDir}" ] && [[ ${gnError} -eq 0 ]]; then
                        sSubDir="$(tar -ztf "${MySB_Files}/${gsRepoFile}" | cut -d '/' -f 1 | uniq)"
                        if [ ! -d "${MySB_InstallDir}/temp/${sSubDir}" ]; then
                            tar -zxf "${MySB_Files}/${gsRepoFile}" -C "${MySB_InstallDir}"/temp/
                            gnError=$?
                        fi
                        if [ -d "${MySB_InstallDir}/temp/${sSubDir}" ] && [ ! -d "${gsRepoDir}" ]; then
                            mv -v "${MySB_InstallDir}/temp/${sSubDir}" "${gsRepoDir}"
                            chown -R root:root "${gsRepoDir}"
                            gnError=$?
                        fi
                    fi
                fi
                ;;
            'WBM')
                if [[ ${gbDownload} -eq 1 ]]; then
                    if [ ! -f "${gsRepoDir}/${gsRepoFile}" ] || [[ ${gnRepoUpgrade} -eq 1 ]]; then
                        ${binCURL} -o "${gsRepoDir}/${gsRepoFile}" "${gsRepoURL}"
                        gnError=$?
                    fi
                fi
                ;;
            'DEB')
                [ -n "${gsFileURL}" ] && gsRepoURL="${gsFileURL}"
                if [[ ${gbDownload} -eq 1 ]]; then
                    if [ ! -f "${gsRepoDir}/${gsRepoFile}" ] || [[ ${gnRepoUpgrade} -eq 1 ]]; then
                        ${binCURL} -o "${MySB_Files}/${gsRepoFile}" "${gsRepoURL}"
                        gnError=$?
                    fi
                fi
                ;;
            'SVN')
                if [ ! -d "${gsRepoDir}"/.svn ]; then
                    # The GitHub project may have a ZIP archive.
                    if [ -f "${MySB_Files}/${gsRepoFile}" ]; then
                        if [[ ${gbExtract} -eq 1 ]]; then
                            sSubDir="$(unzip -l "${MySB_Files}/${gsRepoFile}" | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d')"
                            if [ ! -d "${MySB_InstallDir}/temp/${sSubDir}" ]; then
                                unzip -q "${MySB_Files}/${gsRepoFile}" -d "${MySB_InstallDir}"/temp/
                                gnError=$?
                                # If a package has 2 archives (*_2.zip)
                                if [[ ${gnError} -eq 0 ]] && [ -f "${MySB_Files}/${gsRepoFile//.zip/_2.zip}" ]; then
                                    unzip -q "${MySB_Files}/${gsRepoFile//.zip/_2.zip}" -d "${MySB_InstallDir}"/temp/
                                    gnError=$?
                                fi
                            fi
                            if [[ ${gnError} -eq 0 ]] && [ -d "${MySB_InstallDir}/temp/${sSubDir}" ] && [ ! -d "${gsRepoDir}" ]; then
                                mv -v "${MySB_InstallDir}/temp/${sSubDir}" "${gsRepoDir}"
                                gnError=$?
                            fi
                        fi
                    else
                        svn co --non-interactive --trust-server-cert "${gsRepoURL}" "${gsRepoDir}"
                        gnError=$?
                    fi
                fi
                ;;
            'GIT')
                if [ -f "${MySB_Files}/${gsRepoFile}" ] && [ ! -d "${gsRepoDir}" ]; then
                    if [[ ${gbExtract} -eq 1 ]]; then
                        sSubDir="$(unzip -l "${MySB_Files}/${gsRepoFile}" | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d')"
                        if [ ! -d "${MySB_InstallDir}/temp/${sSubDir}" ]; then
                            unzip -q "${MySB_Files}/${gsRepoFile}" -d "${MySB_InstallDir}"/temp/
                            gnError=$?
                            # If a package has 2 archives (*_2.zip)
                            if [[ ${gnError} -eq 0 ]] && [ -f "${MySB_Files}/${gsRepoFile//.zip/_2.zip}" ]; then
                                unzip -q "${MySB_Files}/${gsRepoFile//.zip/_2.zip}" -d "${MySB_InstallDir}"/temp/
                                gnError=$?
                            fi
                        fi
                        if [[ ${gnError} -eq 0 ]] && [ -d "${MySB_InstallDir}/temp/${sSubDir}" ] && [ ! -d "${gsRepoDir}" ]; then
                            mv -v "${MySB_InstallDir}/temp/${sSubDir}" "${gsRepoDir}"
                            gnError=$?
                        fi
                        if [[ ${gnError} -eq 0 ]] && [ -d "${gsRepoDir}" ] && [[ ${gnRepoUpgrade} -eq 1 ]]; then
                            cd "${gsRepoDir}"/ || exit
                            case "${gsRepoName}" in
                                'Cakebox-Light')
                                    git fetch --tags
                                    git checkout -b "$(git describe --tags "$(git rev-list --tags --max-count=1)")"
                                    gnError=$?
                                    ;;
                                *)
                                    git stash
                                    git pull
                                    gnError=$?
                                    git stash clear
                                    ;;
                            esac
                        fi
                    fi
                elif [ ! -f "${MySB_Files}/${gsRepoFile}" ] && [ ! -d "${gsRepoDir}" ]; then
                    git clone "${gsRepoURL}" "${gsRepoDir}"
                    gnError=$?
                fi
                ;;
            'ZIP')
                [ -n "${gsFileURL}" ] && gsRepoURL="${gsFileURL}"
                if [[ ${gbDownload} -eq 1 ]] || [[ ${gnRepoUpgrade} -eq 1 ]]; then
                    if [ ! -f "${MySB_Files}/${gsRepoFile}" ]; then
                        ${binCURL} -o "${MySB_Files}/${gsRepoFile}" "${gsRepoURL}"
                        gnError=$?
                    fi
                fi
                if [[ ${gbExtract} -eq 1 ]]; then
                    case "${gsRepoName}" in
                        'Wolf CMS' | 'ruTorrent')
                            if [ -f "${MySB_Files}/${gsRepoFile}" ] || [[ ${gnRepoUpgrade} -eq 1 ]]; then
                                gfnDeleteDirectory 1 "${gsRepoDir}"
                            fi
                            ;;
                    esac
                    if [ ! -d "${gsRepoDir}" ] && [[ ${gnError} -eq 0 ]]; then
                        sSubDir="$(unzip -l "${MySB_Files}/${gsRepoFile}" | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d')"
                        if [ ! -d "${MySB_InstallDir}/temp/${sSubDir}" ]; then
                            unzip -q "${MySB_Files}/${gsRepoFile}" -d "${MySB_InstallDir}"/temp/
                            gnError=$?
                        fi
                        if [ -d "${MySB_InstallDir}/temp/${sSubDir}" ] && [ ! -d "${gsRepoDir}" ]; then
                            mv -v "${MySB_InstallDir}/temp/${sSubDir}" "${gsRepoDir}"
                            chown -R root:root "${gsRepoDir}"
                            gnError=$?
                        fi
                        case "${gsRepoName}" in
                            'ruTorrent')
                                [[ ${gnError} -eq 0 ]] && cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade = '0' WHERE name='ruTorrent';" -v
                                ;;
                        esac
                    fi
                fi
                ;;
            'CURL')
                [ -n "${gsFileURL}" ] && gsRepoURL="${gsFileURL}"
                if [[ ${gbDownload} -eq 1 ]]; then
                    ${binCURL} "${gsRepoURL}" -o "${MySB_Files}/${gsRepoFile}"
                    gnError=$?
                    if [ -f "${MySB_Files}/${gsRepoFile}" ]; then
                        if (cp -v "${MySB_Files}/${gsRepoFile}" "${gsRepoDir}"); then
                            (grep -q '/usr/local/bin/' <<<"${gsRepoDir}") && chmod -v +x "${gsRepoDir}"
                            gnError=0
                        else
                            gnError=1
                        fi
                    fi
                fi
                # if [[ ${gbExtract} -eq 1 ]]; then
                #     if [ -f "${MySB_Files}/${gsRepoFile}" ]; then
                #         if (cp -v "${MySB_Files}/${gsRepoFile}" "${gsRepoDir}"); then
                #             (grep -q '/usr/local/bin/' <<<"${gsRepoDir}") && chmod -v +x ${gsRepoDir}
                #             gnError=0
                #         else
                #             gnError=1
                #         fi
                #     fi
                # fi
                ;;
            'DOCKER')
                if [[ ${gbDownload} -eq 1 ]]; then
                    docker pull "${gsRepoURL}:${gsRepoVersion}"
                    gnError=$?
                fi
                ;;
        esac

        [ -d "${gsRepoDir}" ] && find "${gsRepoDir}"/ -type f -print0 | xargs -0 dos2unix &>/dev/null

        echo "--> Ended at : $(date +"%T")"
    fi
}

#### FStab generation
gfnFstabGeneration() {
    local sSwitch sSwap nNumLine nColNum sVFSV sQuotaOpts sDedicatedHome
    sSwitch="${1}"
    sDedicatedHome=$(grep "[[:space:]]/home[[:space:]]" /etc/fstab)

    # Backup
    [[ ! -f ${MySB_InstallDir}/files/fstab.origine ]] && cp -v /etc/fstab "${MySB_InstallDir}"/files/fstab.origine
    cp -v /etc/fstab /etc/fstab.back

    # Remove all comments & empty lines
    sed -i '/^#/d;/^$/d;' /etc/fstab

    # Quota use
    if [[ ${sSwitch} == 'add_quota' ]]; then
        case $(getconf LONG_BIT) in
            64) sVFSV="vfsv1" ;;
            *) sVFSV="vfsv0" ;;
        esac
    fi

    # SWAP
    sSwap="$(grep 'swap' /etc/fstab)"
    if [[ -n ${sSwap} ]]; then
        grep 'swap' /etc/fstab >/tmp/swap.list
        echo "# SWAP" >/tmp/fstab.swap
        while read -r sLine; do
            nColNum=0
            for col in ${sLine}; do
                ((nColNum++))
                case ${nColNum} in
                    1 | 2 | 3 | 4 | 5) echo -n "${col} " >>/tmp/fstab.swap ;;
                    6) echo -e -n "${col}\n" >>/tmp/fstab.swap ;;
                esac
            done
        done </tmp/swap.list
        sed -i '/swap/d' /etc/fstab
    fi

    # All others
    cat /etc/fstab >/tmp/fstab.tmp
    while read -r sLine; do
        sPartition=$(echo "${sLine}" | awk '{ print $2 }')
        case ${sPartition} in
            '/' | '/home')
                nColNum=0
                nNumLine=$(grep "[[:space:]]${sPartition}[[:space:]]" -n -m 1 /etc/fstab | cut -d ':' -f 1)
                if [[ -n ${sDedicatedHome} ]] && [[ ${sPartition} == '/' ]]; then
                    sQuotaOpts=""
                else
                    sQuotaOpts=",usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=${sVFSV}"
                fi
                echo "# ${sPartition}" >>/etc/fstab
                # shellcheck disable=SC2013
                for col in $(grep "[[:space:]]${sPartition}[[:space:]]" /etc/fstab); do
                    ((nColNum++))
                    case ${nColNum} in
                        1 | 2 | 3 | 5) echo -n "${col} " >>/etc/fstab ;;
                        4) echo -n "defaults,errors=remount-ro,relatime,nodiratime${sQuotaOpts} " >>/etc/fstab ;;
                        6) echo -e -n "${col}\n" >>/etc/fstab ;;
                    esac
                done
                sed -i "${nNumLine}d" /etc/fstab
                ;;
            *)
                nNumLine=$(grep "[[:space:]]${sPartition}[[:space:]]" -n -m 1 /etc/fstab | cut -d ':' -f 1)
                nColNum=0
                echo "# ${sPartition}" >>/etc/fstab
                # shellcheck disable=SC2013
                for col in $(grep "[[:space:]]${sPartition}[[:space:]]" /etc/fstab); do
                    ((nColNum++))
                    case ${nColNum} in
                        1 | 2 | 3 | 4 | 5) echo -n "${col} " >>/etc/fstab ;;
                        6) echo -e -n "${col}\n" >>/etc/fstab ;;
                    esac
                done
                sed -i "${nNumLine}d" /etc/fstab
                ;;
        esac
    done </tmp/fstab.tmp
    [[ -f /tmp/fstab.swap ]] && cat /tmp/fstab.swap >>/etc/fstab

    # Validate
    (! mount -a) && cp -vf /etc/fstab.back /etc/fstab
    mount -a
}
#### CCZE HTML logs format
gfnCczeHtmlLogFormat() {
    local sOptions sInput sOutput
    sOptions="-h -r -o scroll -o nolookups -o transparent -o cssfile=${MySB_InstallDir}/web/public/themes/MySB/css/ccze.css"

    [ -n "${1}" ] && sInput="${1}" || return
    [ -n "${2}" ] && sOutput="$2" || return
    [ -n "${3}" ] && sOptions="${sOptions} ${3}"
    [ ! -f "${sInput}" ] && return

    case "$(basename "${sInput}")" in
        'syslog') sOptions="${sOptions} -p syslog" ;;
        'vsftpd.log') sOptions="${sOptions} -p vsftpd" ;;
        'mail.log') sOptions="${sOptions} -p postfix" ;;
        "${binPhpService}") sOptions="${sOptions} -p php" ;;
        *) sOptions="${sOptions} -p httpd" ;;
    esac

    # shellcheck disable=SC2086
    ccze ${sOptions} <"${sInput}" >"${sOutput}"
    [ -f "${sOutput}" ] && sed -i -e '1,8d' -e '$d' "${sOutput}"
    [ ! -s "${sOutput}" ] && rm -f "${sOutput}"
}

#### DNScrypt-proxy
gfnDnscryptProxyConfig() {
    local sRequest sNoLogs sDnsSec sNoFilter sLbStrategy sForceTcp sEphemeralKeys sTlsDisableTickets sDohServers sSearch

    if [ -f /etc/dnscrypt-proxy/dnscrypt-proxy.toml ]; then
        cp -af /etc/dnscrypt-proxy/dnscrypt-proxy.toml /etc/dnscrypt-proxy/dnscrypt-proxy.toml.backup
        sRequest="$(cmdMySQL 'MySB_db' "SELECT require_nolog, require_dnssec, require_nofilter, lb_strategy, force_tcp, ephemeral_keys, tls_disable_session_tickets, doh_servers FROM dnscrypt_config WHERE id_dnscrypt_config='1';" | sed 's/\t/|/g;')"
        sNoLogs="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[1]}')"
        sDnsSec="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[2]}')"
        sNoFilter="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[3]}')"
        sLbStrategy="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[4]}')"
        sForceTcp="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[5]}')"
        sEphemeralKeys="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[6]}')"
        sTlsDisableTickets="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[7]}')"
        sDohServers="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[8]}')"
        sSearch="$(grep 'lb_strategy' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }')"

        sed -i \
            -e "s/^require_nolog = true/require_nolog = ${sNoLogs}/g;s/^require_nolog = false/require_nolog = ${sNoLogs}/g" \
            -e "s/^require_dnssec = true/require_dnssec = ${sDnsSec}/g;s/^require_dnssec = false/require_dnssec = ${sDnsSec}/g" \
            -e "s/^require_nofilter = true/require_nofilter = ${sNoFilter}/g;s/^require_nofilter = false/require_nofilter = ${sNoFilter}/g" \
            -e "s/^force_tcp = true/force_tcp = ${sForceTcp}/g;s/^force_tcp = false/force_tcp = ${sForceTcp}/g" \
            -e "s/^dnscrypt_ephemeral_keys = true/dnscrypt_ephemeral_keys = ${sEphemeralKeys}/g;s/^dnscrypt_ephemeral_keys = false/dnscrypt_ephemeral_keys = ${sEphemeralKeys}/g" \
            -e "s/lb_strategy = ${sSearch}/lb_strategy = '${sLbStrategy}'/g;" \
            -e "s/^tls_disable_session_tickets = true/tls_disable_session_tickets = ${sTlsDisableTickets}/g;s/^tls_disable_session_tickets = false/tls_disable_session_tickets = ${sTlsDisableTickets}/g" \
            -e "s/^doh_servers = true/doh_servers = ${sDohServers}/g;s/^doh_servers = false/doh_servers = ${sDohServers}/g" \
            /etc/dnscrypt-proxy/dnscrypt-proxy.toml

        if (! dnscrypt-proxy -config /etc/dnscrypt-proxy/dnscrypt-proxy.toml -check); then
            cp -af /etc/dnscrypt-proxy/dnscrypt-proxy.toml.backup /etc/dnscrypt-proxy/dnscrypt-proxy.toml
            sNoLogs="$(grep 'require_nolog' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }')"
            sDnsSec="$(grep 'require_dnssec' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }')"
            sNoFilter="$(grep 'require_nofilter' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }')"
            sLbStrategy="$(grep 'lb_strategy' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }' | sed "s/'//g;")"
            sForceTcp="$(grep 'force_tcp' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }')"
            sEphemeralKeys="$(grep 'ephemeral_keys' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }')"
            sTlsDisableTickets="$(grep 'tls_disable_session_tickets' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }')"
            sDohServers="$(grep 'doh_servers' /etc/dnscrypt-proxy/dnscrypt-proxy.toml | awk '{ print $3 }')"
            cmdMySQL 'MySB_db' "UPDATE dnscrypt_config SET require_nolog='${sNoLogs}', require_dnssec='${sDnsSec}', require_nofilter='${sNoFilter}', lb_strategy='${sLbStrategy}', force_tcp='${sForceTcp}', ephemeral_keys='${sEphemeralKeys}', tls_disable_session_tickets='${sTlsDisableTickets}', doh_servers='${sDohServers}' WHERE id_dnscrypt_config='1';"
        fi
        systemctl restart dnscrypt-proxy.service
    fi
}

#### MD5 check
gfnMd5Check() {
    local sFile sName nReturn sLine
    nReturn=0

    [ -z "${1}" ] && return 1
    [ ! -f "${gsCheckSumFile}" ] && return 1
    sFile="${1}"
    sName="$(basename "${sFile}")"
    sName="$(echo "${sName}" | tr '[:lower:]' '[:upper:]')"

    if [ -d "${MySB_InstallDir}"/templates/"${sName}"/ ]; then
        find "${MySB_InstallDir}"/templates/"${sName}"/ -type f | while read -r sLine; do
            [ "$(grep "${sLine}" "${gsCheckSumFile}")" != "$(md5sum "${sLine}")" ] && nReturn=1
        done
    else
        [ "$(grep "${sFile}" "${gsCheckSumFile}")" != "$(md5sum "${sFile}")" ] && nReturn=1
    fi

    return "${nReturn}"
}

##################### LAST LINE ######################################
